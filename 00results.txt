
 iteration => 607 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 606 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 605 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 604 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 603 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 602 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 601 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 600 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 599 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 598 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 597 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 596 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 595 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 594 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 593 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 592 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 591 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 590 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 589 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 588 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 587 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 586 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 585 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 584 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 583 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 582 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 581 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 580 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 579 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 578 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 577 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 576 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 575 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 574 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 573 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 572 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 571 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 570 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 569 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 568 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 567 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 566 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 565 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 564 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 563 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 562 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 561 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 560 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 559 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 558 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 557 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 556 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 555 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 554 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 553 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 552 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 551 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 550 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 549 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 548 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 547 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 546 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 545 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 544 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 543 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 542 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 541 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 540 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 539 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 538 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 537 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 536 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 535 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 534 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 533 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 532 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 531 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 530 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 529 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 528 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 527 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 526 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 525 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 524 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 523 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 522 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 521 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 520 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 519 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 518 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 517 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 516 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 515 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 514 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 513 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 512 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 511 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 510 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 509 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 508 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 507 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 506 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 505 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 504 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 503 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 502 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 501 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 500 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 499 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 498 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 497 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 496 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 495 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 494 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 493 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 492 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 491 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 490 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 489 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 488 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 487 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 486 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 485 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 484 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 483 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 482 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 481 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 480 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 479 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 478 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 477 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 476 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 475 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 474 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 473 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 472 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 471 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 470 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 469 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 468 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 467 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 466 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 465 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 464 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 463 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 462 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 461 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 460 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 459 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 458 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 457 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 456 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 455 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 454 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 453 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 452 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 451 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 450 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 449 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 448 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 447 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 446 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 445 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 444 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 443 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 442 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 441 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 440 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 439 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 438 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 437 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 436 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 435 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 434 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 433 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 432 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 431 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 430 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 429 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 428 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 427 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 426 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 425 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 424 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 423 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 422 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 421 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 420 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 419 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 418 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 417 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 416 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 415 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 414 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 413 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 412 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 411 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 410 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 409 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 408 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 407 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 406 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 405 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 404 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 403 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 402 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 401 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 400 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 399 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 398 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 397 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 396 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 395 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 394 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 393 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 392 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 391 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 390 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 389 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 388 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 387 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 386 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 385 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 384 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 383 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 382 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 381 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 380 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 379 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 378 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 377 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 376 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 375 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 374 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 373 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 372 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 371 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 370 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 369 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 368 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 367 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 366 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 365 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 364 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 363 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 362 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 361 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 360 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 359 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 358 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 357 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 356 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 355 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 354 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 353 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 352 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 351 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 350 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 349 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 348 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 347 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 346 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 345 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 344 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 343 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 342 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 341 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 340 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 339 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 338 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 337 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 336 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 335 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 334 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 333 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 332 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 331 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 330 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 329 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 328 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 327 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 326 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 325 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 324 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 323 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 322 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 321 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 320 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 319 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 318 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 317 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 316 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 315 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 314 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 313 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 312 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 311 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 310 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 309 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 308 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 307 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 306 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 305 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 304 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 303 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 302 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 301 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 300 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 299 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 298 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 297 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 296 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 295 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 294 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 293 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 292 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 291 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 290 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 289 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 288 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 287 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 286 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 285 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 284 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 283 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 282 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 281 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 280 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 279 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 278 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 277 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 276 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 275 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 274 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 273 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 272 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 271 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 270 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 269 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 268 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 267 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 266 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 265 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 264 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 263 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 262 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 261 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 260 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 259 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 258 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 257 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 256 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 255 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 254 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 253 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 252 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 251 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 250 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 249 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 248 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 247 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 246 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 245 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 244 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 243 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 242 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 241 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 240 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 239 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 238 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 237 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 236 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 235 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 234 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 233 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 232 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 231 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 230 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 229 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 228 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 227 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 226 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 225 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 224 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 223 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 222 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 221 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 220 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 219 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 218 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 217 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 216 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 215 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 214 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 213 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 212 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 211 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 210 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 209 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 208 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 207 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 206 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 205 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 204 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 203 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 202 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 201 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 200 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 199 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 198 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 197 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 196 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 195 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 194 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 193 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 192 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 191 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 190 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 189 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 188 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 187 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 186 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 185 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 184 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 183 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 182 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 181 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 180 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 179 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 178 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 177 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 176 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 175 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 174 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 173 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 172 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 171 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 170 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 169 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 168 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 167 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 166 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 165 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 164 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 163 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 162 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 161 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 160 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 159 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 158 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 157 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 156 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 155 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 154 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 153 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 152 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 151 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 150 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 149 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 148 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 147 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 146 
 best cost => 0.45811761011045976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -11, -12, -3, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6677.43/-2454.83) 

 iteration => 145 
 best cost => 0.4581179880680856 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -9, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6672.05/-2452.85) 

 iteration => 144 
 best cost => 0.4581179880680856 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -9, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6672.05/-2452.85) 

 iteration => 143 
 best cost => 0.4581179880680856 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -9, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6672.05/-2452.85) 

 iteration => 142 
 best cost => 0.4581179880680856 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -9, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6672.05/-2452.85) 

 iteration => 141 
 best cost => 0.4581179880680856 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 0, -7, -3, -14, -8, -5, 10, -14, -9, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6672.05/-2452.85) 

 iteration => 140 
 best cost => 0.45811802736969126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 10, 0, -7, -3, -14, -8, -5, 10, -14, -14, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6678.24/-2455.14) 

 iteration => 139 
 best cost => 0.45811802736969126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 10, 0, -7, -3, -14, -8, -5, 10, -14, -14, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6678.24/-2455.14) 

 iteration => 138 
 best cost => 0.45811802736969126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 10, 0, -7, -3, -14, -8, -5, 10, -14, -14, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6678.24/-2455.14) 

 iteration => 137 
 best cost => 0.45811802736969126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 10, 0, -7, -3, -14, -8, -5, 10, -14, -14, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6678.24/-2455.14) 

 iteration => 136 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 135 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 134 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 133 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 132 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 131 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 130 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 129 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 128 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 127 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 126 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 125 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 124 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 123 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 122 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 121 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 120 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 119 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 118 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 117 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 116 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 115 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 114 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 113 
 best cost => 0.45811845305673976 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.52) 

 iteration => 112 
 best cost => 0.45811879403183464 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -15, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.4/-2458.53) 

 iteration => 111 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 110 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 109 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 108 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 107 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 106 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 105 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 104 
 best cost => 0.45812155535395155 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6687.41/-2458.48) 

 iteration => 103 
 best cost => 0.45812359259796503 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -6, 12, 0, -7, -3, -14, -8, -5, 10, -14, -16, -12, -4, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6682.23/-2456.77) 

 iteration => 102 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 101 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 100 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 99 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 98 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 97 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 96 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 95 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 94 
 best cost => 0.4581254666058193 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.56) 

 iteration => 93 
 best cost => 0.45812683286921385 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 6, -7, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6667.91/-2451.6) 

 iteration => 92 
 best cost => 0.45812698428383475 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -6, 11, 1, -7, -3, -14, -8, -5, 10, -14, -10, -12, -1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6668.52/-2451.51) 

 iteration => 91 
 best cost => 0.4581335698344126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 10, 4, -7, -4, -13, -8, -5, 10, -14, -12, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6664.98/-2450.72) 

 iteration => 90 
 best cost => 0.4581335698344126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 10, 4, -7, -4, -13, -8, -5, 10, -14, -12, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6664.98/-2450.72) 

 iteration => 89 
 best cost => 0.4581335698344126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 10, 4, -7, -4, -13, -8, -5, 10, -14, -12, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6664.98/-2450.72) 

 iteration => 88 
 best cost => 0.4581335698344126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 10, 4, -7, -4, -13, -8, -5, 10, -14, -12, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6664.98/-2450.72) 

 iteration => 87 
 best cost => 0.4581335698344126 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 10, 4, -7, -4, -13, -8, -5, 10, -14, -12, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6664.98/-2450.72) 

 iteration => 86 
 best cost => 0.4583172911436815 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 3, 4, -2, 12, 0, -8, -4, -14, -8, -5, 10, -14, -13, -12, -7, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6659.74/-2454.23) 

 iteration => 85 
 best cost => 0.4583390285789109 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -7, 5, -2, -8, -3, -14, -8, -5, 10, -14, -12, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6643.25/-2448.81) 

 iteration => 84 
 best cost => 0.4583390285789109 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -7, 5, -2, -8, -3, -14, -8, -5, 10, -14, -12, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6643.25/-2448.81) 

 iteration => 83 
 best cost => 0.4583390285789109 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -7, 5, -2, -8, -3, -14, -8, -5, 10, -14, -12, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6643.25/-2448.81) 

 iteration => 82 
 best cost => 0.4583390285789109 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -7, 5, -2, -8, -3, -14, -8, -5, 10, -14, -12, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6643.25/-2448.81) 

 iteration => 81 
 best cost => 0.4583391153815369 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 5, -7, 5, -2, -8, -3, -14, -8, -5, 10, -14, -12, -12, -2, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6643.27/-2448.82) 

 iteration => 80 
 best cost => 0.4584658886513247 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -3, 16, -2, -8, -5, -15, -8, -5, 10, -13, -14, -12, 1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6771.47/-2500.03) 

 iteration => 79 
 best cost => 0.4584658886513247 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -3, 16, -2, -8, -5, -15, -8, -5, 10, -13, -14, -12, 1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6771.47/-2500.03) 

 iteration => 78 
 best cost => 0.4584658886513247 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -3, 16, -2, -8, -5, -15, -8, -5, 10, -13, -14, -12, 1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6771.47/-2500.03) 

 iteration => 77 
 best cost => 0.4584659522289967 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 1, 4, -3, 16, -2, -8, -5, -15, -8, -5, 10, -13, -14, -12, 1, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-6771.6/-2500.08) 

 iteration => 76 
 best cost => 0.45948426803047426 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 0, 5, -7, 8, 5, -7, 0, -15, -11, -5, 10, -12, -9, -13, -9, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-7234.3/-2708.72) 

 iteration => 75 
 best cost => 0.46113753652366163 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, -1, 5, -8, 4, -3, 10, -4, -5, -15, -6, 6, -4, -6, -15, -10, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-8561.1/-3309.73) 

 iteration => 74 
 best cost => 0.461733423265261 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 4, 5, -9, 7, 14, -7, -1, -16, -3, -3, 9, -10, -6, -7, -11, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-3641.11/-1436.11) 

 iteration => 73 
 best cost => 0.461733423265261 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 4, 5, -9, 7, 14, -7, -1, -16, -3, -3, 9, -10, -6, -7, -11, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-3641.11/-1436.11) 

 iteration => 72 
 best cost => 0.461733423265261 
 best position => [-3, -8, -6, 12, -17, -1, -6, 15, -2, 4, -7, 9, -16, -6, -9, 4, 5, -9, 7, 14, -7, -1, -16, -3, -3, 9, -10, -6, -7, -11, 1, 6, -1, 9, -13, 1, -2, -14, -4, -1, -10, -7, -3, -1, -1, -15, -1, -7, -4, -15, -6, -4, -2, -5, 13, -3, -17, -5, 7, -2] 
 best function => np.exp(x_2-3641.11/-1436.11) 

 iteration => 71 
 best cost => 0.4638313835225599 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, -2, 7, -8, 8, 14, 2, -1, -9, 11, -16, 10, 0, -4, 3, -5, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 6622.55 - 2169.62/x_0**0.657043351643583 

 iteration => 70 
 best cost => 0.4779078795732652 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, 0, 6, -10, 12, 1, 3, 2, -10, 11, -15, 8, 0, -2, -8, -12, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 10346.38 - 615.51/x_0**2.36677926297338 

 iteration => 69 
 best cost => 0.5841922142672342 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, 2, 5, -12, -5, 0, 4, 1, -9, -6, -13, 11, 0, -6, -9, -16, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 12754.07 - 3121.82/x_0**2.03924197549191 

 iteration => 68 
 best cost => 0.5841922142672342 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, 2, 5, -12, -5, 0, 4, 1, -9, -6, -13, 11, 0, -6, -9, -16, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 12754.07 - 3121.82/x_0**2.03924197549191 

 iteration => 67 
 best cost => 0.5960985052062818 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, 1, 6, -12, 8, -5, 3, 2, -4, -3, -12, 13, 4, -6, -9, -12, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 10978.89 - 3195.17/x_0**2.03484401728925 

 iteration => 66 
 best cost => 0.726735758348022 
 best position => [-13, -17, -6, 4, -16, 12, -13, 15, -3, 14, 4, -4, -4, -7, -6, 1, 6, -15, 9, -5, -1, 8, -11, -5, -13, 12, 7, -5, -13, -7, 10, -7, -1, -16, 4, -8, 2, -15, 5, 1, -1, -3, -9, -17, 2, -14, 0, 13, -4, -9, -2, -3, -5, -4, -2, -7, -11, 2, 8, 2] 
 best function => 7751.33 - 2820.45/x_0**2.37747005978259 

 iteration => 65 
 best cost => 0.9458517437309815 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 4, 5, -5, 2, 6, 5, 0, -7, -12, -15, 9, -14, -12, -11, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.00011856497008302 

 iteration => 64 
 best cost => 0.9458518848244531 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 1, 5, -7, 2, 4, 6, 5, -13, -15, -14, 3, -14, -12, -13, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000124033490388046 

 iteration => 63 
 best cost => 0.9458518848244531 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 1, 5, -7, 2, 4, 6, 5, -13, -15, -14, 3, -14, -12, -13, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000124033490388046 

 iteration => 62 
 best cost => 0.9458518848244531 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 1, 5, -7, 2, 4, 6, 5, -13, -15, -14, 3, -14, -12, -13, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000124033490388046 

 iteration => 61 
 best cost => 0.9458519376097742 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 4, 5, -2, 1, 6, 4, 2, -6, -13, -15, 7, -14, -12, -10, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000126079349354046 

 iteration => 60 
 best cost => 0.9458519376097742 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 4, 5, -2, 1, 6, 4, 2, -6, -13, -15, 7, -14, -12, -10, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000126079349354046 

 iteration => 59 
 best cost => 0.9458519376097742 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 4, 5, -2, 1, 6, 4, 2, -6, -13, -15, 7, -14, -12, -10, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000126079349354046 

 iteration => 58 
 best cost => 0.9458520144424997 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 0, 4, -5, -12, 0, 4, -8, -16, -12, -14, 5, -14, -13, -10, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000129057238323178 

 iteration => 57 
 best cost => 0.9458520144424997 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, 0, 4, -5, -12, 0, 4, -8, -16, -12, -14, 5, -14, -13, -10, -8, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000129057238323178 

 iteration => 56 
 best cost => 0.945852183056773 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, -1, 4, -5, 3, 0, 9, 0, -16, -14, -13, 5, -16, -13, -15, -12, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000135592396583971 

 iteration => 55 
 best cost => 0.945852183056773 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, -1, 4, -5, 3, 0, 9, 0, -16, -14, -13, 5, -16, -13, -15, -12, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000135592396583971 

 iteration => 54 
 best cost => 0.9458524059077937 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, -1, 4, -5, 3, 0, 9, 0, -16, -14, -13, 5, -16, -13, -15, -12, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000144229649123104 

 iteration => 53 
 best cost => 0.9458524059077937 
 best position => [-1, -14, 8, 9, -12, 14, -16, 7, -8, 7, 1, -2, -6, -9, 15, -1, 4, -5, 3, 0, 9, 0, -16, -14, -13, 5, -16, -13, -15, -12, 9, -16, -1, -1, -2, -10, -2, 2, -5, -4, 4, -4, -8, -5, 3, -10, -4, 6, -5, -6, 4, -4, -13, 10, 3, -8, -11, 8, 5, -7] 
 best function => x_2 - 0.000144229649123104 

 iteration => 52 
 best cost => 0.998504328142912 
 best position => [15, -6, 10, 10, 1, 9, -6, 13, -10, 11, -6, 1, -1, 4, 11, 4, 11, -7, 13, 0, 3, 12, -5, -14, -17, 16, 7, -14, -6, -17, 10, -10, -2, -12, 1, -14, -10, -4, 4, 6, 11, 4, 1, -1, -1, -3, -9, -3, -2, 9, 6, -8, -10, 9, 15, -14, -7, 13, 6, -3] 
 best function => np.sin(np.sign(np.sin(1949.08-3321.99*388.02-7744.67**x_0 -7708.12-9955.85))) 

 iteration => 51 
 best cost => 0.998504328142912 
 best position => [15, -6, 10, 10, 1, 9, -6, 13, -10, 11, -6, 1, -1, 4, 11, 4, 11, -7, 13, 0, 3, 12, -5, -14, -17, 16, 7, -14, -6, -17, 10, -10, -2, -12, 1, -14, -10, -4, 4, 6, 11, 4, 1, -1, -1, -3, -9, -3, -2, 9, 6, -8, -10, 9, 15, -14, -7, 13, 6, -3] 
 best function => np.sin(np.sign(np.sin(1949.08-3321.99*388.02-7744.67**x_0 -7708.12-9955.85))) 

 iteration => 50 
 best cost => 0.999650923187389 
 best position => [15, -6, 10, 10, 1, 9, -6, 13, -10, 11, -6, 1, -1, 4, 11, 7, 10, -6, 9, 3, 3, 13, -6, -14, -6, 16, 1, -15, -10, -4, 10, -10, -2, -12, 1, -14, -10, -4, 4, 6, 11, 4, 1, -1, -1, -3, -9, -3, -2, 9, 6, -8, -10, 9, 15, -14, -7, 13, 6, -3] 
 best function => np.sin(np.sign(np.sin(2148.76-5306.1*2180.08-7864.17**x_0 -8426.43-2944.68))) 

 iteration => 49 
 best cost => 0.999650923187389 
 best position => [15, -6, 10, 10, 1, 9, -6, 13, -10, 11, -6, 1, -1, 4, 11, 7, 10, -6, 9, 3, 3, 13, -6, -14, -6, 16, 1, -15, -10, -4, 10, -10, -2, -12, 1, -14, -10, -4, 4, 6, 11, 4, 1, -1, -1, -3, -9, -3, -2, 9, 6, -8, -10, 9, 15, -14, -7, 13, 6, -3] 
 best function => np.sin(np.sign(np.sin(2148.76-5306.1*2180.08-7864.17**x_0 -8426.43-2944.68))) 

 iteration => 48 
 best cost => 0.999650923187389 
 best position => [15, -6, 10, 10, 1, 9, -6, 13, -10, 11, -6, 1, -1, 4, 11, 7, 10, -6, 9, 3, 3, 13, -6, -14, -6, 16, 1, -15, -10, -4, 10, -10, -2, -12, 1, -14, -10, -4, 4, 6, 11, 4, 1, -1, -1, -3, -9, -3, -2, 9, 6, -8, -10, 9, 15, -14, -7, 13, 6, -3] 
 best function => np.sin(np.sign(np.sin(2148.76-5306.1*2180.08-7864.17**x_0 -8426.43-2944.68))) 

 iteration => 47 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 46 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 44 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 43 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 42 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 41 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 39 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 38 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 37 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 36 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 34 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 33 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 32 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 31 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 29 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 28 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 27 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 26 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 24 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 23 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 22 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 21 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 19 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 18 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 17 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 16 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 14 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 13 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 12 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 11 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 9 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 8 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 7 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 6 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 4 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 3 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 2 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 1 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 
