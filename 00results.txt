
 iteration => 1420 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1415 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1410 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1405 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1400 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1395 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1390 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1385 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1380 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1375 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1370 
 best cost => 4.3964953259804105 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -4, 3, -6, -6, -13, -9, 12, -4, -7, -8, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -4, -8, -13, -1, -12, -9, 11, -10, -8] 
 best function => 2053.94*x_0 

 iteration => 1365 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1360 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1355 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1350 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1345 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1340 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1335 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1330 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1325 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1320 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1315 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1310 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1305 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1300 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1295 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1290 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1285 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1280 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1275 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1270 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1265 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1260 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1255 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1250 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1245 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1240 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1235 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1230 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1225 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1220 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1215 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1210 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1205 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1200 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1195 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1190 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1185 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1180 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1175 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1170 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1165 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1160 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1155 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1150 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1145 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1140 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1135 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1130 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1125 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1120 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1115 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1110 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1105 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1100 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1095 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1090 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1085 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1080 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1075 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1070 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1065 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1060 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1055 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1050 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1045 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1040 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1035 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1030 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1025 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1020 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1015 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1010 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1005 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 1000 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 995 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 990 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 985 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 980 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 975 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 970 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 965 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 960 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 955 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 950 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 945 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 940 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 935 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 930 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 925 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 920 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 915 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 910 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 905 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 900 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 895 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 890 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 885 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 880 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 875 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 870 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 865 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 860 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 855 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 850 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 845 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 840 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 835 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 830 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 825 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 820 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 815 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 810 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 805 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 800 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 795 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 790 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 785 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 780 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 775 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 770 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 765 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 760 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 755 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 750 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 745 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 740 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 735 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 730 
 best cost => 4.397299671138323 
 best position => [-2, 2, -13, 16, -3, 13, 5, -3, -12, -10, -6, -7, -14, 0, -6, -3, 6, 8, 4, 8, -13, -6, -2, 13, -3, 6, -8, 3, -6, -6, -13, -9, 12, -4, -7, -7, 1, 13, 3, -1, -3, -7, -12, 1, -11, 13, -14, -4, -7, -4, -6, -1, -8, -13, -1, -12, -8, 11, -10, -8] 
 best function => 2052.93*x_0 

 iteration => 725 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 720 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 715 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 710 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 705 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 700 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 695 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 690 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 685 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 680 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 675 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 670 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 665 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 660 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 655 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 650 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 645 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 640 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 635 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 630 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 625 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 620 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 615 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 610 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 605 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 600 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 595 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 590 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 585 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 580 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 575 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 570 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 565 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 560 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 555 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 550 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 545 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 540 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 535 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 530 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 525 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 520 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 515 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 510 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 505 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 500 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 495 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 490 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 485 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 480 
 best cost => 95.53923837121617 
 best position => [-9, -3, -1, 14, -4, 2, 2, -7, -12, 1, -12, 8, -6, -10, 1, -7, -13, 12, 14, 3, -11, -12, -6, 13, -16, -3, 8, -10, -12, -2, -14, -8, 14, 1, 1, 3, -2, 16, 10, -8, 13, -1, -5, -4, -1, 13, -13, 12, -10, -5, -2, 7, -5, -10, 4, -1, 1, 12, -1, -3] 
 best function => np.sqrt(5004.19**np.exp(-9384.22-6926.94*7627.78-5393.87-3552.05*x_1 )) 

 iteration => 475 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 470 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 465 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 460 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 455 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 450 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 445 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 440 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 435 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 430 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 425 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 420 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 415 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 410 
 best cost => 95.5401941195652 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -3, 15, 6, -2, 1, 0, -8, 9, -13, 5, -6, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -3070.55-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9205.43-7348.99-7522.04-2349.93-47.51/x_2))))))) 

 iteration => 405 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 400 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 395 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 390 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 385 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 380 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 375 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 370 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 365 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 360 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 355 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 350 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 345 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 340 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 335 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 330 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 325 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 320 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 315 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 310 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 305 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 300 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 295 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 290 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 285 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 280 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 275 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 270 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 265 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 260 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 255 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 250 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 245 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 240 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 235 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 230 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 225 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 220 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 215 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 210 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 205 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 200 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 195 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 190 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 185 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 180 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 175 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 170 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 165 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 160 
 best cost => 95.54019413991328 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -1, 15, 6, 8, 1, 0, -16, 9, -13, 5, -5, -13, -4, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -2637.01-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9203.16-7273.94-7405.92-2337.38-69.03/x_2))))))) 

 iteration => 155 
 best cost => 95.54029602616572 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, 0, 16, 5, 10, 1, 0, -7, -2, -13, 3, -9, -13, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4760.72-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9624.69-7566.9-7507.41-3077.81-69.4/x_2))))))) 

 iteration => 150 
 best cost => 95.54029602616572 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, 0, 16, 5, 10, 1, 0, -7, -2, -13, 3, -9, -13, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4760.72-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9624.69-7566.9-7507.41-3077.81-69.4/x_2))))))) 

 iteration => 145 
 best cost => 95.54029602616572 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, 0, 16, 5, 10, 1, 0, -7, -2, -13, 3, -9, -13, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4760.72-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9624.69-7566.9-7507.41-3077.81-69.4/x_2))))))) 

 iteration => 140 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 135 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 130 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 125 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 120 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 115 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 110 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 105 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 100 
 best cost => 95.5403132905789 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.15-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9641.11-7544.5-8464.35-3086.07-75.0/x_2))))))) 

 iteration => 95 
 best cost => 95.54518646558702 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, 0, -5, 16, 5, 9, 1, 0, -15, -2, -13, 5, -9, -15, -6, 5, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -4792.19-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(9640.71-7544.5-8464.4-3086.06-74.92/x_2))))))) 

 iteration => 90 
 best cost => 95.57446160135677 
 best position => [-5, -2, 2, 4, -7, 12, 4, 4, 13, 8, -8, 15, -5, -2, 15, -3, -5, -1, 14, 7, -5, 3, -17, 0, -13, 4, -10, -17, -5, 10, -7, 7, 4, 6, 3, 0, 8, 4, 14, 8, 15, 4, -3, 0, 13, 14, -10, 8, -3, -4, -1, -2, -14, -1, 8, -9, 3, 9, 9, -13] 
 best function => np.sin(+x_1 -5740.98-np.exp(np.floor(np.floor(np.sin(np.floor(np.sign(-359.29-7572.66-9512.29-2689.5--1740.14/x_2))))))) 

 iteration => 85 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 80 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 75 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 70 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 65 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 60 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 55 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 50 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 0 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : /np.tanh(x_26496.9-9977.144131.23-7818.84/4394.09-6178.66np.exp(*-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 
