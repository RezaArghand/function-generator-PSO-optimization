
 iteration => 60 
 best cost => 6.647111452865202 
 best position => [7, 15, 1, -12, -4, -2, -5, -11, -7, 2, -14, -15, 3, -1, 7, -6, -5, 15, -8, -6, -9, 9, -2, 9, -12, -6, -10, 6, -11, -8, 0, -3, -14, -16, -14, -4, -5, -13, -2, -3, 9, -5, -9, -10, 0, 10, -1, 0, -16, 4, -3, -5, 2, -12, -6, 5, -10, -5, -16, -7] 
 best function => 9.861725277934765 

 iteration => 55 
 best cost => 14.164949462222152 
 best position => [-2, -1, -4, -10, -4, -1, 3, 10, 7, 11, -13, 13, -4, -1, 10, -3, -10, 1, 0, -4, -16, 6, -3, -12, -6, 1, -11, -3, -10, -1, 12, 10, -5, -5, -9, -6, -10, -9, -3, -4, 12, 7, 1, 3, -1, 5, 11, -5, 15, 4, -11, -2, -3, -8, -3, -4, -2, -4, -11, -11] 
 best function => 41.61619080637584 

 iteration => 50 
 best cost => 14.164949462222152 
 best position => [-2, -1, -4, -10, -4, -1, 3, 10, 7, 11, -13, 13, -4, -1, 10, -3, -10, 1, 0, -4, -16, 6, -3, -12, -6, 1, -11, -3, -10, -1, 12, 10, -5, -5, -9, -6, -10, -9, -3, -4, 12, 7, 1, 3, -1, 5, 11, -5, 15, 4, -11, -2, -3, -8, -3, -4, -2, -4, -11, -11] 
 best function => 41.61619080637584 

 iteration => 45 
 best cost => 14.164949462222152 
 best position => [-2, -1, -4, -10, -4, -1, 3, 10, 7, 11, -13, 13, -4, -1, 10, -3, -10, 1, 0, -4, -16, 6, -3, -12, -6, 1, -11, -3, -10, -1, 12, 10, -5, -5, -9, -6, -10, -9, -3, -4, 12, 7, 1, 3, -1, 5, 11, -5, 15, 4, -11, -2, -3, -8, -3, -4, -2, -4, -11, -11] 
 best function => 41.61619080637584 

 iteration => 40 
 best cost => 1476.7319888453362 
 best position => [1, -1, -6, -5, -1, 9, -5, 1, 11, 5, -11, 13, 7, -11, 10, -7, -10, -5, -6, 10, -10, 13, 0, -8, -2, 8, -5, 1, -6, 0, 12, 14, -4, 0, 0, -6, -8, -12, 4, 1, 11, 15, -7, 4, 8, 15, -2, -4, 7, 13, -5, 4, -13, -8, 3, -9, -7, -10, -5, -2] 
 best function => np.floor(x_0 -974.7*8237.58/-3398.63**np.sin(6552.43--4111.9)) 

 iteration => 35 
 best cost => 1476.7319888453362 
 best position => [1, -1, -6, -5, -1, 9, -5, 1, 11, 5, -11, 13, 7, -11, 10, -7, -10, -5, -6, 10, -10, 13, 0, -8, -2, 8, -5, 1, -6, 0, 12, 14, -4, 0, 0, -6, -8, -12, 4, 1, 11, 15, -7, 4, 8, 15, -2, -4, 7, 13, -5, 4, -13, -8, 3, -9, -7, -10, -5, -2] 
 best function => np.floor(x_0 -974.7*8237.58/-3398.63**np.sin(6552.43--4111.9)) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 0 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 
