
 iteration => 170 
 best cost => 41.83599490029095 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -6, 12, 2, 7, -2, 4, 7, -16, 0, 3, 3, -1, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(2347.58-3459.42*x_1 +2301.09-3953.06+268.07)) 

 iteration => 165 
 best cost => 41.83599490029095 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -6, 12, 2, 7, -2, 4, 7, -16, 0, 3, 3, -1, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(2347.58-3459.42*x_1 +2301.09-3953.06+268.07)) 

 iteration => 160 
 best cost => 41.83599490029095 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -6, 12, 2, 7, -2, 4, 7, -16, 0, 3, 3, -1, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(2347.58-3459.42*x_1 +2301.09-3953.06+268.07)) 

 iteration => 155 
 best cost => 41.83599490029095 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -6, 12, 2, 7, -2, 4, 7, -16, 0, 3, 3, -1, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(2347.58-3459.42*x_1 +2301.09-3953.06+268.07)) 

 iteration => 150 
 best cost => 41.83599490029095 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -6, 12, 2, 7, -2, 4, 7, -16, 0, 3, 3, -1, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(2347.58-3459.42*x_1 +2301.09-3953.06+268.07)) 

 iteration => 145 
 best cost => 42.46952925897383 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -7, 11, 5, 7, -3, 5, 4, -5, 4, 2, 2, -3, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(1582.16-4093.22*x_1 +1282.53-4145.48+2557.02)) 

 iteration => 140 
 best cost => 42.46952925897383 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -7, 11, 5, 7, -3, 5, 4, -5, 4, 2, 2, -3, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(1582.16-4093.22*x_1 +1282.53-4145.48+2557.02)) 

 iteration => 135 
 best cost => 42.46952925897383 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -7, 3, -7, 11, 5, 7, -3, 5, 4, -5, 4, 2, 2, -3, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(1582.16-4093.22*x_1 +1282.53-4145.48+2557.02)) 

 iteration => 130 
 best cost => 42.65019263814757 
 best position => [12, 4, 11, 4, -7, 6, 4, 11, 4, 11, -12, -4, -2, 10, -8, -8, -13, -9, 11, -11, 7, -3, 1, 4, 3, 5, -2, 5, -2, 3, -4, 3, 2, -8, 1, 10, -5, 15, 0, 0, 11, -6, -7, 9, -5, 13, -5, 8, -4, -10, -6, -10, -13, -14, -11, 15, 4, 12, -13, -2] 
 best function => +np.floor(x_1 +np.floor(-630.25-5606.69*x_1 +3528.32-4807.77+3670.07)) 

 iteration => 125 
 best cost => 95.32015876534686 
 best position => [6, 2, -1, 5, -6, 6, -2, 13, 1, 13, -13, 1, -9, -3, 7, 8, -7, -2, 2, 1, 8, -5, -1, -12, 0, 13, 12, 8, -4, -10, 3, 13, 4, -16, 1, -1, -4, 5, -4, 2, 13, -2, -2, -1, 3, 14, 7, 10, -11, -5, -4, -9, -14, -13, -16, 5, -1, -4, -9, -8] 
 best function => x_0 **np.sign(x_1 **8677.48-4281.73-1045.99/np.exp(5428.59)) 

 iteration => 120 
 best cost => 95.32015876534686 
 best position => [6, 2, -1, 5, -6, 6, -2, 13, 1, 13, -13, 1, -9, -3, 7, 8, -7, -2, 2, 1, 8, -5, -1, -12, 0, 13, 12, 8, -4, -10, 3, 13, 4, -16, 1, -1, -4, 5, -4, 2, 13, -2, -2, -1, 3, 14, 7, 10, -11, -5, -4, -9, -14, -13, -16, 5, -1, -4, -9, -8] 
 best function => x_0 **np.sign(x_1 **8677.48-4281.73-1045.99/np.exp(5428.59)) 

 iteration => 115 
 best cost => 95.32015876534686 
 best position => [6, 2, -1, 5, -6, 6, -2, 13, 1, 13, -13, 1, -9, -3, 7, 8, -7, -2, 2, 1, 8, -5, -1, -12, 0, 13, 12, 8, -4, -10, 3, 13, 4, -16, 1, -1, -4, 5, -4, 2, 13, -2, -2, -1, 3, 14, 7, 10, -11, -5, -4, -9, -14, -13, -16, 5, -1, -4, -9, -8] 
 best function => x_0 **np.sign(x_1 **8677.48-4281.73-1045.99/np.exp(5428.59)) 

 iteration => 110 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 105 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 100 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 95 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 90 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 85 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 80 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 75 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 70 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 65 
 best cost => 100.00000000000007 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -3, 2, -1, 9, 9, -2, -9, 1, 0, 9, -4, 15, 14, -12, -1, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => x_0 -np.sign(np.sqrt(5735.53-1258.34-1085.53-152.3**np.exp(x_1 /-248.38))) 

 iteration => 60 
 best cost => 10000.0 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -4, 3, 0, 3, -7, -1, -9, -11, -12, -7, 12, -1, -2, -9, -6, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => error(1) : x_0 -np.sign(np.sqrt(-4243.49-2302.98-602.17-3614.45**np.exp(x_1 /193.04))) 

 iteration => 55 
 best cost => 10000.0 
 best position => [-7, 2, -4, 14, -8, 9, -3, 11, 14, 14, -13, 1, -6, 0, 13, -4, 3, 0, 3, -7, -1, -9, -11, -12, -7, 12, -1, -2, -9, -6, 12, 12, 1, -15, 1, -7, -3, -2, 1, -4, 13, -2, 0, 3, 10, 5, -2, 15, -5, -7, 8, -5, -10, -1, 4, -3, -1, -6, -4, 10] 
 best function => error(1) : x_0 -np.sign(np.sqrt(-4243.49-2302.98-602.17-3614.45**np.exp(x_1 /193.04))) 

 iteration => 50 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 0 
 best cost => 15000 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(2) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 
