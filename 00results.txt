
 iteration => 845 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 840 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 835 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 830 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 825 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 820 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 815 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 810 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 805 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 800 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 795 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 790 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 785 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 780 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 775 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 770 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 765 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 760 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 755 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 750 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 745 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 740 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 735 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 730 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 725 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 720 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 715 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 710 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 705 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 700 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 695 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 690 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 685 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 680 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 675 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 670 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 665 
 best cost => 37.0924624847552 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, 2, -1, -4, -2, -13, -3, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.68**x_1 

 iteration => 660 
 best cost => 37.092465943071204 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.74**x_1 

 iteration => 655 
 best cost => 37.092465943071204 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.74**x_1 

 iteration => 650 
 best cost => 37.092465943071204 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.75/7854.74**x_1 

 iteration => 645 
 best cost => 37.09246879332073 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.73/7854.74**x_1 

 iteration => 640 
 best cost => 37.09246879332073 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.73/7854.74**x_1 

 iteration => 635 
 best cost => 37.09246879332073 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -14, -1, -4, -1, -13, 0, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.73/7854.74**x_1 

 iteration => 630 
 best cost => 37.09247363886439 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -12, -1, -4, -1, -13, 0, -14, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.7/7854.75**x_1 

 iteration => 625 
 best cost => 37.09247363886439 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -13, -8, 2, -7, -6, -12, -1, -4, -1, -13, 0, -14, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.7/7854.75**x_1 

 iteration => 620 
 best cost => 37.09451948074919 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -4, -13, -9, -7, 2, -7, -6, -7, -1, -5, -2, -13, 0, -13, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 165.0/7878.69**x_1 

 iteration => 615 
 best cost => 37.09949491808505 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -14, 3, 2, -3, -6, -3, -1, -6, 1, -13, -5, -15, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 164.47/7977.15**x_1 

 iteration => 610 
 best cost => 37.513381758774095 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -3, -13, -12, 3, 2, -13, -6, -4, -1, -6, 0, -13, -5, -11, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 203.37/7987.16**x_1 

 iteration => 605 
 best cost => 55.19383537845417 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, 0, -16, -9, -13, -7, -6, 7, -6, -2, -10, -10, -7, 14, -12, 2, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 1225.45/9533.69**x_1 

 iteration => 600 
 best cost => 55.54457848477008 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, 0, -15, -8, -12, -9, -9, 8, -6, -2, -12, -13, -7, 12, -9, 0, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 1242.73/9322.14**x_1 

 iteration => 595 
 best cost => 57.66554737941387 
 best position => [13, 10, 12, 15, -7, -7, -11, -4, -1, -3, -13, -3, -13, 5, -8, -15, -12, -8, -6, 5, -3, 9, 10, -3, 0, -1, -7, 8, -14, -1, 8, -13, -12, -4, 13, -13, -9, -16, 11, -3, -10, -9, 4, -1, -5, -2, 6, -5, -8, -13, -9, -6, -2, 3, -3, -7, -4, -12, -15, -5] 
 best function => 1257.39/6961.87**x_1 

 iteration => 590 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 585 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 580 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 575 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 570 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 565 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 560 
 best cost => 60.16568992260456 
 best position => [13, 10, 10, 15, -7, -7, -10, -5, -1, -2, -15, -2, -13, 6, -2, -11, -13, -11, -5, -1, -3, -1, -4, -3, -8, -2, -4, 9, -12, 7, 9, -6, -14, -4, 13, -13, -9, -16, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7949.45**x_1 

 iteration => 555 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 550 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 545 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 540 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 535 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 530 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 525 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 520 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 515 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 510 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 505 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 500 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 495 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 490 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 485 
 best cost => 60.17365191770363 
 best position => [13, 10, 10, 7, -7, -7, -10, -5, -1, -2, -15, -2, -13, 5, -4, -11, -13, -10, -5, -1, -6, 1, -4, -3, -8, -2, -8, 5, -13, 7, 8, -6, -12, -4, 13, -7, -9, -15, 11, -1, -1, -7, 2, -1, -5, -2, 6, -5, -8, -8, -8, -6, -1, 0, -3, -8, -8, -12, -15, -5] 
 best function => 1559.95/7940.81**x_1 

 iteration => 480 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 475 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 470 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 465 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 460 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 455 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 450 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 445 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 440 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 435 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 430 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 425 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 420 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 415 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 410 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 405 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 400 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 395 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 390 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 385 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 380 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 375 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 370 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 365 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 360 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 355 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 350 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 345 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 340 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 335 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 330 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 325 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 320 
 best cost => 71.48278862237683 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -7, -10, -8, -2, 2, -9, -1, -3, -8, -9, 6, -4, 0, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5147.87-4603.61/-3761.65-x_0 ) 

 iteration => 315 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 310 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 305 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 300 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 295 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 290 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 285 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 280 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 275 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 270 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 265 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 260 
 best cost => 71.61716914923643 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -8, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4672.84/-3277.46-x_0 ) 

 iteration => 255 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 250 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 245 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 240 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 235 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 230 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 225 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 220 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 215 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 210 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 205 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 200 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 195 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 190 
 best cost => 72.97151307562858 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, 0, -2, 2, -9, -5, -2, -8, -9, 6, -4, 1, -11, -3, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5044.59-4625.34/-3278.01-x_0 ) 

 iteration => 185 
 best cost => 75.18672488324573 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -5, -12, -9, -2, 1, -7, 4, -6, -8, -9, 5, 3, 2, -8, -2, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5038.35-4503.69/-3043.86-x_0 ) 

 iteration => 180 
 best cost => 78.23754281821273 
 best position => [14, 11, 10, 6, -6, 1, -7, 6, -13, 1, -4, 9, -12, 0, 9, -6, -12, -5, -2, 4, -8, -6, -3, -10, -9, 6, -6, 1, -12, -4, 12, -8, -2, -1, 14, -3, -16, -15, 10, -3, -3, -2, 2, 8, 1, 11, -4, -1, -5, -4, -7, -5, -11, 7, 2, -3, -1, -13, -5, -5] 
 best function => np.tan(+-5428.15-6248.03/-3553.82-x_0 ) 

 iteration => 175 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 170 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 165 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 160 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 155 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 150 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 145 
 best cost => 95.53923837121617 
 best position => [8, -1, 13, 5, -7, -3, -3, 8, -6, 1, -5, 12, -9, 4, 11, 2, -5, -9, -2, 4, -6, 9, -5, -8, -10, 6, -5, 4, -7, 1, -5, -12, 2, -7, -3, -4, -12, -5, 2, 5, 1, -2, 5, -4, 7, 9, -5, 12, 7, -11, -6, -6, -11, 14, -2, -3, -5, -5, 7, -5] 
 best function => np.floor(x_0 **np.sin(np.tanh(-824.97-3979.37+1665.07-5561.19-4893.42))) 

 iteration => 140 
 best cost => 96.03968000878791 
 best position => [8, -1, 11, 5, -8, -3, -3, 8, -6, 1, -3, 14, -2, 3, 11, 0, -5, -1, 4, 0, -6, -4, -5, -7, -4, -1, -1, -6, -7, 2, -5, -1, 2, -7, -3, -7, -12, -5, 2, 5, 1, 1, 5, -4, 7, 9, -6, 11, 6, -11, -6, -6, -11, 14, -3, -3, -5, -10, 7, -1] 
 best function => np.exp(-x_0 +np.sin(np.sin(2826.27-4001.19+270.55-479.87-4237.64))) 

 iteration => 135 
 best cost => 96.03971444914373 
 best position => [8, -1, 11, 5, -8, -3, -3, 8, -6, 1, -3, 14, -2, 3, 11, 2, -10, -1, 11, -3, 2, -5, -5, -5, -8, 0, -1, -6, -7, -2, -5, -1, 2, -7, -3, -7, -12, -5, 2, 5, 1, 1, 5, -4, 7, 9, -6, 11, 6, -11, -6, -6, -11, 14, -3, -3, -5, -10, 7, -1] 
 best function => np.exp(-x_0 +np.sin(np.sin(6905.84-3976.45+1280.45-465.69-2529.93))) 

 iteration => 130 
 best cost => 96.03971444914373 
 best position => [8, -1, 11, 5, -8, -3, -3, 8, -6, 1, -3, 14, -2, 3, 11, 2, -10, -1, 11, -3, 2, -5, -5, -5, -8, 0, -1, -6, -7, -2, -5, -1, 2, -7, -3, -7, -12, -5, 2, 5, 1, 1, 5, -4, 7, 9, -6, 11, 6, -11, -6, -6, -11, 14, -3, -3, -5, -10, 7, -1] 
 best function => np.exp(-x_0 +np.sin(np.sin(6905.84-3976.45+1280.45-465.69-2529.93))) 

 iteration => 125 
 best cost => 96.03971444914373 
 best position => [8, -1, 11, 5, -8, -3, -3, 8, -6, 1, -3, 14, -2, 3, 11, 2, -10, -1, 11, -3, 2, -5, -5, -5, -8, 0, -1, -6, -7, -2, -5, -1, 2, -7, -3, -7, -12, -5, 2, 5, 1, 1, 5, -4, 7, 9, -6, 11, 6, -11, -6, -6, -11, 14, -3, -3, -5, -10, 7, -1] 
 best function => np.exp(-x_0 +np.sin(np.sin(6905.84-3976.45+1280.45-465.69-2529.93))) 

 iteration => 120 
 best cost => 96.04226195083882 
 best position => [8, -1, 11, 5, -8, -3, -3, 8, -6, 1, -3, 14, -2, 3, 11, -16, -10, -12, -2, -3, -5, 5, -3, -5, -4, 0, 1, -4, -7, -3, -5, -1, 2, -7, -3, -7, -12, -5, 2, 5, 1, 1, 5, -4, 7, 9, -6, 11, 6, -11, -6, -6, -11, 14, -3, -3, -5, -10, 7, -1] 
 best function => np.exp(-x_0 +np.sin(np.sin(-1090.59-3981.07+-9793.13-7225.74-2996.61))) 

 iteration => 115 
 best cost => 103.84297308532729 
 best position => [8, -10, 12, 10, -6, -15, -7, 9, 0, 5, -9, 12, -2, 8, 13, 3, -16, -2, -16, -5, -7, 11, -7, -11, -4, -7, 1, 7, -8, 13, 2, -5, 3, 2, -4, -12, -10, -2, 5, 2, -2, -1, 0, -2, 7, 3, 4, 14, -3, -9, -2, -8, 8, 11, 7, -16, -9, -5, 13, -7] 
 best function => np.sin(x_0 *np.tanh(2113.73/-9725.68-2202.38**-3907.29-6670.35-4549.36-872.06)) 

 iteration => 110 
 best cost => 103.84297308532729 
 best position => [8, -10, 12, 10, -6, -15, -7, 9, 0, 5, -9, 12, -2, 8, 13, 3, -16, -2, -16, -5, -7, 11, -7, -11, -4, -7, 1, 7, -8, 13, 2, -5, 3, 2, -4, -12, -10, -2, 5, 2, -2, -1, 0, -2, 7, 3, 4, 14, -3, -9, -2, -8, 8, 11, 7, -16, -9, -5, 13, -7] 
 best function => np.sin(x_0 *np.tanh(2113.73/-9725.68-2202.38**-3907.29-6670.35-4549.36-872.06)) 

 iteration => 105 
 best cost => 103.84297308532729 
 best position => [8, -10, 12, 10, -6, -15, -7, 9, 0, 5, -9, 12, -2, 8, 13, 3, -16, -2, -16, -5, -7, 11, -7, -11, -4, -7, 1, 7, -8, 13, 2, -5, 3, 2, -4, -12, -10, -2, 5, 2, -2, -1, 0, -2, 7, 3, 4, 14, -3, -9, -2, -8, 8, 11, 7, -16, -9, -5, 13, -7] 
 best function => np.sin(x_0 *np.tanh(2113.73/-9725.68-2202.38**-3907.29-6670.35-4549.36-872.06)) 

 iteration => 100 
 best cost => 103.84297308532729 
 best position => [8, -10, 12, 10, -6, -15, -7, 9, 0, 5, -9, 12, -2, 8, 13, 3, -16, -2, -16, -5, -7, 11, -7, -11, -4, -7, 1, 7, -8, 13, 2, -5, 3, 2, -4, -12, -10, -2, 5, 2, -2, -1, 0, -2, 7, 3, 4, 14, -3, -9, -2, -8, 8, 11, 7, -16, -9, -5, 13, -7] 
 best function => np.sin(x_0 *np.tanh(2113.73/-9725.68-2202.38**-3907.29-6670.35-4549.36-872.06)) 

 iteration => 95 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 90 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 85 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 80 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 75 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 70 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 65 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 60 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 55 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 50 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 

 iteration => 0 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : /np.tan(x_1 6496.9-9977.144131.23-7818.84**4394.09-6178.66np.exp(+-5227.68**x_1 158.81np.tan(-459.8np.exp(973.99)))) 
