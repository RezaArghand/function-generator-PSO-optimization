
 iteration => 100 
 best cost => 94.27443934142096 
 best position => [19, -24, -6, 32, -30, -21, -26, -18, -14, 26, -11, -5, -40, -4, 41, -14, 10, 1, -37, -9, -13, 42, -3, -6, 24, -5, -10, 20, -32, -20, -28, -7, 31, -29, 3, -49, -3, -6, -11, 34, -31, -37, -1, -12, -39, -29, -21, -1, -11, -1, -11, -5, 40, -44, -13, -22, -19, -20, -7, -8] 
 best function => 402.16*x_0 

 iteration => 95 
 best cost => 94.27443934142096 
 best position => [19, -24, -6, 32, -30, -21, -26, -18, -14, 26, -11, -5, -40, -4, 41, -14, 10, 1, -37, -9, -13, 42, -3, -6, 24, -5, -10, 20, -32, -20, -28, -7, 31, -29, 3, -49, -3, -6, -11, 34, -31, -37, -1, -12, -39, -29, -21, -1, -11, -1, -11, -5, 40, -44, -13, -22, -19, -20, -7, -8] 
 best function => 402.16*x_0 

 iteration => 90 
 best cost => 94.27443934142096 
 best position => [19, -24, -6, 32, -30, -21, -26, -18, -14, 26, -11, -5, -40, -4, 41, -14, 10, 1, -37, -9, -13, 42, -3, -6, 24, -5, -10, 20, -32, -20, -28, -7, 31, -29, 3, -49, -3, -6, -11, 34, -31, -37, -1, -12, -39, -29, -21, -1, -11, -1, -11, -5, 40, -44, -13, -22, -19, -20, -7, -8] 
 best function => 402.16*x_0 

 iteration => 85 
 best cost => 251.5653263847125 
 best position => [23, -36, -18, 9, -42, 17, -43, -36, 9, 30, -1, -41, 10, -41, 25, -9, -45, -22, -12, -13, -43, 33, -17, -27, -8, -6, 4, -8, -24, -30, -16, 13, -3, -17, -11, -7, -24, -1, 16, 45, -13, -4, -46, 15, -36, -14, 15, 26, -22, -10, -34, -24, 47, -8, -20, -12, -22, -23, 19, -17] 
 best function => +-8479.84*np.sin(x_0 -4483.06-4097.21**-3086.07) 

 iteration => 80 
 best cost => 251.5653263847125 
 best position => [23, -36, -18, 9, -42, 17, -43, -36, 9, 30, -1, -41, 10, -41, 25, -9, -45, -22, -12, -13, -43, 33, -17, -27, -8, -6, 4, -8, -24, -30, -16, 13, -3, -17, -11, -7, -24, -1, 16, 45, -13, -4, -46, 15, -36, -14, 15, 26, -22, -10, -34, -24, 47, -8, -20, -12, -22, -23, 19, -17] 
 best function => +-8479.84*np.sin(x_0 -4483.06-4097.21**-3086.07) 

 iteration => 75 
 best cost => 251.5653263847125 
 best position => [23, -36, -18, 9, -42, 17, -43, -36, 9, 30, -1, -41, 10, -41, 25, -9, -45, -22, -12, -13, -43, 33, -17, -27, -8, -6, 4, -8, -24, -30, -16, 13, -3, -17, -11, -7, -24, -1, 16, 45, -13, -4, -46, 15, -36, -14, 15, 26, -22, -10, -34, -24, 47, -8, -20, -12, -22, -23, 19, -17] 
 best function => +-8479.84*np.sin(x_0 -4483.06-4097.21**-3086.07) 

 iteration => 70 
 best cost => 251.5653263847125 
 best position => [23, -36, -18, 9, -42, 17, -43, -36, 9, 30, -1, -41, 10, -41, 25, -9, -45, -22, -12, -13, -43, 33, -17, -27, -8, -6, 4, -8, -24, -30, -16, 13, -3, -17, -11, -7, -24, -1, 16, 45, -13, -4, -46, 15, -36, -14, 15, 26, -22, -10, -34, -24, 47, -8, -20, -12, -22, -23, 19, -17] 
 best function => +-8479.84*np.sin(x_0 -4483.06-4097.21**-3086.07) 

 iteration => 65 
 best cost => 251.5653263847125 
 best position => [23, -36, -18, 9, -42, 17, -43, -36, 9, 30, -1, -41, 10, -41, 25, -9, -45, -22, -12, -13, -43, 33, -17, -27, -8, -6, 4, -8, -24, -30, -16, 13, -3, -17, -11, -7, -24, -1, 16, 45, -13, -4, -46, 15, -36, -14, 15, 26, -22, -10, -34, -24, 47, -8, -20, -12, -22, -23, 19, -17] 
 best function => +-8479.84*np.sin(x_0 -4483.06-4097.21**-3086.07) 

 iteration => 60 
 best cost => 2615.379699843698 
 best position => [51, -36, -13, -7, -17, 43, -10, -8, -5, 40, -19, -28, -1, -33, 50, -1, -51, -2, -5, -23, -7, 18, -31, -40, -14, 25, -8, -14, -5, 31, -17, 32, -20, -40, -1, -17, 40, -4, 34, 37, -14, -3, -37, 6, 6, -9, -1, 45, 1, -14, -32, -31, 42, -12, -7, -15, -42, -20, 35, -39] 
 best function => -876.55-(+np.floor(-918.41*np.sin(x_0 -5744.93-342.89))) 

 iteration => 55 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 50 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 45 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 40 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 35 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 30 
 best cost => 2636.277721472806 
 best position => [47, -35, -44, 51, -6, 52, -26, -15, 51, 36, -31, -21, -40, -35, 44, -8, -36, -13, 52, -4, -47, 38, -31, -33, -31, 31, -44, -23, -38, 33, 17, 50, 5, 30, 45, -47, -20, -15, 30, 52, -13, 4, -21, 51, 36, -30, -23, 48, 33, -43, 20, -12, -18, 8, 30, -23, -44, 12, 52, -40] 
 best function => np.sqrt(x_1 --6060.44-4185.06*-8785.16**-5763.68**9822.04**x_0 -2352.63//--7112.38) 

 iteration => 25 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 

 iteration => 20 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 

 iteration => 15 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 

 iteration => 10 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 

 iteration => 5 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 

 iteration => 0 
 best cost => 10000 
 best position => [36, -9, 1, 30, -3, 43, -24, 12, 43, 32, -21, 42, -3, -7, 43, -3, -26, 5, 23, 34, -53, 38, -19, -33, -28, 32, -45, 0, -42, 21, 33, 49, 9, 10, 8, -33, 11, -3, 27, 44, 42, 4, 21, 33, 41, 47, -6, 52, 31, 11, 13, -28, -41, 31, 33, -38, -49, 43, 19, 14] 
 best function => error(1) : +np.exp(np.sin(**np.sign(x_1 6496.9-9977.144131.23-7818.84np.exp(-4394.09-6178.66x_1 --5227.68-np.sqrt(x_1 158.81(-459.8np.sign(973.99))))))) 
