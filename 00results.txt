
 iteration => 5 
 best cost => 9.83189836243392 
 best position => [13, -17, -17, -13, -18, 10, 17, 15, 15, 11, -17, 4, 18, 7, -18, 18, 2, 2, 2, -18, 1, 2, -2, -15, 13, 2, 6, 3, 6, 18, 16, 9, -11, 15, 10, 7, -19, -15, 17, -18, 13, -18, -7, 17, -17, -17, 15, -18, 8, 9, -7, -10, -18, 9, -18, -10, -14, -15, 16, -3] 
 best function => np.tanh(1086.92--7739.63-9205.24**-np.exp(1578.68*3529.8+x_2)) 

 iteration => 4 
 best cost => 9.83189836243392 
 best position => [13, -17, -17, -13, -18, 10, 17, 15, 15, 11, -17, 4, 18, 7, -18, 18, 2, 2, 2, -18, 1, 2, -2, -15, 13, 2, 6, 3, 6, 18, 16, 9, -11, 15, 10, 7, -19, -15, 17, -18, 13, -18, -7, 17, -17, -17, 15, -18, 8, 9, -7, -10, -18, 9, -18, -10, -14, -15, 16, -3] 
 best function => np.tanh(1086.92--7739.63-9205.24**-np.exp(1578.68*3529.8+x_2)) 

 iteration => 3 
 best cost => 9.83189836243392 
 best position => [13, -17, -17, -13, -18, 10, 17, 15, 15, 11, -17, 4, 18, 7, -18, 18, 2, 2, 2, -18, 1, 2, -2, -15, 13, 2, 6, 3, 6, 18, 16, 9, -11, 15, 10, 7, -19, -15, 17, -18, 13, -18, -7, 17, -17, -17, 15, -18, 8, 9, -7, -10, -18, 9, -18, -10, -14, -15, 16, -3] 
 best function => np.tanh(1086.92--7739.63-9205.24**-np.exp(1578.68*3529.8+x_2)) 

 iteration => 2 
 best cost => 589.7170756229923 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -8, -15, -12, -8, -3, -11, -3, -18, 16, 14, -19, 0, -15, -4, 10, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 5768.95-5749.22**np.sqrt(np.sign(x_2*np.sqrt(8901.33-1230.75-1949.27*-7542.66))) 

 iteration => 1 
 best cost => 589.7170756229923 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -8, -15, -12, -8, -3, -11, -3, -18, 16, 14, -19, 0, -15, -4, 10, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 5768.95-5749.22**np.sqrt(np.sign(x_2*np.sqrt(8901.33-1230.75-1949.27*-7542.66))) 
