
 iteration => 643 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 642 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 641 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 640 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 639 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 638 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 637 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 636 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 635 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 634 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 633 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 632 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 631 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 630 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 629 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 628 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 627 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 626 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 625 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 624 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 623 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 622 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 621 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 620 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 619 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 618 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 617 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 616 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 615 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 614 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 613 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 612 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 611 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 610 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 609 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 608 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 607 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 606 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 605 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 604 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 603 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 602 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 601 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 600 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 599 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 598 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 597 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 596 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 595 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 594 
 best cost => 7.017910287241764 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -13, -9, -11, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3139.98-8827.94*-5734.75) 

 iteration => 593 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 592 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 591 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 590 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 589 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 588 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 587 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 586 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 585 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 584 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 583 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 582 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 581 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 580 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 579 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 578 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 577 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 576 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 575 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 574 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 573 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 572 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 571 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 570 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 569 
 best cost => 7.017910298399192 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -13, 8, 18, -11, -4, -13, -9, -10, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.34-8827.94*-5734.75) 

 iteration => 568 
 best cost => 7.017912357340035 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -11, 8, 18, -11, -4, -14, -9, -13, 1, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3145.42-8827.94*-5734.68) 

 iteration => 567 
 best cost => 7.0179168981225075 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3145.52-8827.64*-5734.72) 

 iteration => 566 
 best cost => 7.0179168981225075 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3145.52-8827.64*-5734.72) 

 iteration => 565 
 best cost => 7.017925424195708 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3143.88-8827.7*-5734.39) 

 iteration => 564 
 best cost => 7.017925893477771 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.09-8827.66*-5734.4) 

 iteration => 563 
 best cost => 7.017925893477771 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.09-8827.66*-5734.4) 

 iteration => 562 
 best cost => 7.017925893477771 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.09-8827.66*-5734.4) 

 iteration => 561 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 560 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 559 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 558 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 557 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 556 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 555 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 554 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 553 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 552 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 551 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 550 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 549 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 548 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 547 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 546 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 545 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 544 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 543 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 542 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 541 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 540 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 539 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 538 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 537 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 536 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 535 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 534 
 best cost => 7.017925894606903 
 best position => [-6, 3, -12, 6, 1, 16, -4, 16, 12, 17, -14, -16, 18, 13, -8, 16, -6, 6, -4, -17, -14, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -2, 5, 6, -10, -3, -15, -18, -6, -3, -17, -10, -2, 16, -7, -9, 9, -13, -18, 11, -2, -6, -14, 16, -1, -6, -12, -2, -2, -14] 
 best function => np.log(x_1 -3144.43-8827.66*-5734.4) 

 iteration => 533 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 532 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 531 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 530 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 529 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 528 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 527 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 526 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 525 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 524 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 523 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 522 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 521 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 520 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 519 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 518 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 517 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 516 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 515 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 514 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 513 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 512 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 511 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 510 
 best cost => 7.019943696514263 
 best position => [-6, -1, -12, 6, -2, 17, -3, 16, 10, 17, -13, -16, 18, 13, -8, 16, -6, 6, -4, -17, -15, 8, 18, -11, -4, -14, -9, -12, 2, 8, -17, -3, 4, 5, -3, -3, -15, -19, -6, -3, -17, -10, -3, 16, -8, -9, 9, -13, -18, 11, -2, -5, -15, 16, -1, -6, -12, -2, -2, -12] 
 best function => np.log(x_1 -3144.57-8788.87*-5690.99) 

 iteration => 509 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 508 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 507 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 506 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 505 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 504 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 503 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 502 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 501 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 500 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 499 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 498 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 497 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 496 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 495 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 494 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 493 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 492 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 491 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 490 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 489 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 488 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 487 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 486 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 485 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 484 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 483 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 482 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 481 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 480 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 479 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 478 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 477 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 476 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 475 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 474 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 473 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 472 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 471 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 470 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 469 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 468 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 467 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 466 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 465 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 464 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 463 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 462 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 461 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 460 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 459 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 458 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 457 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 456 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 455 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 454 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 453 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 452 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 451 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 450 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 449 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 448 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 447 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 446 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 445 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 444 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 443 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 442 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 441 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 440 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 439 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 438 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 437 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 436 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 435 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 434 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 433 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 432 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 431 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 430 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 429 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 428 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 427 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 426 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 425 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 424 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 423 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 422 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 421 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 420 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 419 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 418 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 417 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 416 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 415 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 414 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 413 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 412 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 411 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 410 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 409 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 408 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 407 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 406 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 405 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 404 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 403 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 402 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 401 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 400 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 399 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 398 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 397 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 396 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 395 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 394 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 393 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 392 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 391 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 390 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 389 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 388 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 387 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 386 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 385 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 384 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 383 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 382 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 381 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 380 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 379 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 378 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 377 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 376 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 375 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 374 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 373 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 372 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 371 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 370 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 369 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 368 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 367 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 366 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 365 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 364 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 363 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 362 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 361 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 360 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 359 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 358 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 357 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 356 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 355 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 354 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 353 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 352 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 351 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 350 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 349 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 348 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 347 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 346 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 345 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 344 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 343 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 342 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 341 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 340 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 339 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 338 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 337 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 336 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 335 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 334 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 333 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 332 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 331 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 330 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 329 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 328 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 327 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 326 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 325 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 324 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 323 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 322 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 321 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 320 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 319 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 318 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 317 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 316 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 315 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 314 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 313 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 312 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 311 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 310 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 309 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 308 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 307 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 306 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 305 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 304 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 303 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 302 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 301 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 300 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 299 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 298 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 297 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 296 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 295 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 294 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 293 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 292 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 291 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 290 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 289 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 288 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 287 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 286 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 285 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 284 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 283 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 282 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 281 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 280 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 279 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 278 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 277 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 276 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 275 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 274 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 273 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 272 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 271 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 270 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 269 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 268 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 267 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 266 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 265 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 264 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 263 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 262 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 261 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 260 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 259 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 258 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 257 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 256 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 255 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 254 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 253 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 252 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 251 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 250 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 249 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 248 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 247 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 246 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 245 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 244 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 243 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 242 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 241 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 240 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 239 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 238 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 237 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 236 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 235 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 234 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 233 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 232 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 231 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 230 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 229 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 228 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 227 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 226 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 225 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 224 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 223 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 222 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 221 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 220 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 219 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 218 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 217 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 216 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 215 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 214 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 213 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 212 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 211 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 210 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 209 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 208 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 207 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 206 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 205 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 204 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 203 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 202 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 201 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 200 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 199 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 198 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 197 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 196 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 195 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 194 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 193 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 192 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 191 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 190 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 189 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 188 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 187 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 186 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 185 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 184 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 183 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 182 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 181 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 180 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 179 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 178 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 177 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 176 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 175 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 174 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 173 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 172 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 171 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 170 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 169 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 168 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 167 
 best cost => 7.903591983790306 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, 13, -9, 6, 6, -10, -13, 7, 18, -3, -5, -2, -8, 1, 4, 8, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-4225.55+-5211.93-1412.01)))) 

 iteration => 166 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 165 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 164 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 163 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 162 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 161 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 160 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 159 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 158 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 157 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 156 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 155 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 154 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 153 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 152 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 151 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 150 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 149 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 148 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 147 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 146 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 145 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 144 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 143 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 142 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 141 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 140 
 best cost => 7.9035926011079205 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -4, -14, 6, 10, -10, -14, 8, 16, -5, -5, 2, -17, 1, -5, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-7222.4+-5205.52-2191.48)))) 

 iteration => 139 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 138 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 137 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 136 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 135 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 134 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 133 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 132 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 131 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 130 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 129 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 128 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 127 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 126 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 125 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 124 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 123 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 122 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 121 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 120 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 119 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 118 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 117 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 116 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 115 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 114 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 113 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 112 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 111 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 110 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 109 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 108 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 107 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 106 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 105 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 104 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 103 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 102 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 101 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 100 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 99 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 98 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 97 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 96 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 95 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 94 
 best cost => 7.903608506099946 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -3, -16, 6, 10, -11, -13, 8, 16, -5, -5, 2, -19, 2, -19, 10, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-8415.99+-5472.14-2182.68)))) 

 iteration => 93 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 92 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 91 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 90 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 89 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 88 
 best cost => 7.903699151530307 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1584.01+-5187.43-3311.52)))) 

 iteration => 87 
 best cost => 7.903740324427963 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -4, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, -1, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1583.97+-5187.43-3311.52)))) 

 iteration => 86 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 85 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 84 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 83 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 82 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 81 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 80 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 79 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 78 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 77 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 76 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 75 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 74 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 73 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 72 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 71 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 70 
 best cost => 7.9037899814349855 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -11, -3, 7, 9, -10, -14, 8, 18, -7, -5, 2, -8, -2, 0, 9, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-1160.59+-5183.62-3311.5)))) 

 iteration => 69 
 best cost => 7.903975150037974 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -5, -6, 6, 13, -13, -13, 7, 18, -3, -5, 3, -9, -4, -19, 7, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-3112.33+-6622.15-1064.71)))) 

 iteration => 68 
 best cost => 7.9042275231198875 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -5, -6, 6, 13, -13, -13, 7, 18, -3, -5, 3, -9, -4, -19, 7, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-3112.32+-6622.15-1064.71)))) 

 iteration => 67 
 best cost => 7.9042275231198875 
 best position => [1, -2, -3, 7, -11, 17, -4, 16, 8, 15, -15, -11, 12, 15, 0, -5, -6, 6, 13, -13, -13, 7, 18, -3, -5, 3, -9, -4, -19, 7, -10, 10, 3, 6, 6, -4, -6, -4, -5, 9, -12, -19, 3, 13, -2, -3, 12, -3, -14, 15, -3, -7, -7, 15, -9, -9, -1, -17, -12, -6] 
 best function => np.exp(np.exp(np.tanh(x_2+np.sin(-3112.32+-6622.15-1064.71)))) 

 iteration => 66 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 65 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 64 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 63 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 62 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 61 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 60 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 59 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 58 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 57 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 56 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 55 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 54 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 53 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 52 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 51 
 best cost => 9.862516776997465 
 best position => [3, 7, -1, -18, -17, 17, -2, 14, 10, -4, -5, -12, 13, 12, -1, 5, 2, -1, 9, -14, -4, 12, -1, -10, -14, -1, -9, -14, -5, 18, 0, 1, -7, -10, 9, -6, -2, -5, -7, 10, -13, -6, 7, 12, -1, -1, 14, -3, -8, 16, -1, -5, -6, 15, 3, -10, -11, -14, -9, -4] 
 best function => np.sqrt(x_2-6974.68*-np.sqrt(np.exp(1328.52-5197.98-7312.48))) 

 iteration => 50 
 best cost => 9.999956486077831 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -3, -10, 15, 5, -12, -7, 3, -4, -9, 0, -10, -15, 3, -16, 12, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8060.34-3439.43-7394.83**x_2)/np.floor(-5819.3-4606.62**-5164.44) 

 iteration => 49 
 best cost => 9.999956486077831 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -3, -10, 15, 5, -12, -7, 3, -4, -9, 0, -10, -15, 3, -16, 12, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8060.34-3439.43-7394.83**x_2)/np.floor(-5819.3-4606.62**-5164.44) 

 iteration => 48 
 best cost => 9.999956486077831 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -3, -10, 15, 5, -12, -7, 3, -4, -9, 0, -10, -15, 3, -16, 12, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8060.34-3439.43-7394.83**x_2)/np.floor(-5819.3-4606.62**-5164.44) 

 iteration => 47 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 46 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 45 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 44 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 43 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 42 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 41 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 40 
 best cost => 9.999964993046152 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -9, 2, 6, -9, -11, 12, 7, -10, 2, -9, -10, -16, -17, 1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8526.9-5694.65-5245.12**x_2)/np.floor(-4675.32-5134.78**-4523.83) 

 iteration => 39 
 best cost => 9.999995761668284 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 6, -11, 3, 16, -16, -9, 11, -1, -8, -1, -8, -10, 0, -17, 2, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8606.06-4542.88-4940.64**x_2)/np.floor(-8141.13-3740.19**-5507.89) 

 iteration => 38 
 best cost => 9.999995761668284 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 6, -11, 3, 16, -16, -9, 11, -1, -8, -1, -8, -10, 0, -17, 2, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8606.06-4542.88-4940.64**x_2)/np.floor(-8141.13-3740.19**-5507.89) 

 iteration => 37 
 best cost => 9.999995761668284 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 6, -11, 3, 16, -16, -9, 11, -1, -8, -1, -8, -10, 0, -17, 2, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8606.06-4542.88-4940.64**x_2)/np.floor(-8141.13-3740.19**-5507.89) 

 iteration => 36 
 best cost => 10.000008511160392 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.3-2251.59-5646.51**x_2)/np.floor(-6697.07-3797.78**-5618.2) 

 iteration => 35 
 best cost => 10.000008511160392 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.3-2251.59-5646.51**x_2)/np.floor(-6697.07-3797.78**-5618.2) 

 iteration => 34 
 best cost => 10.000008511160392 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.3-2251.59-5646.51**x_2)/np.floor(-6697.07-3797.78**-5618.2) 

 iteration => 33 
 best cost => 10.000008511160392 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.3-2251.59-5646.51**x_2)/np.floor(-6697.07-3797.78**-5618.2) 

 iteration => 32 
 best cost => 10.000008511160392 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.3-2251.59-5646.51**x_2)/np.floor(-6697.07-3797.78**-5618.2) 

 iteration => 31 
 best cost => 10.00001119734961 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.07-2256.17-5646.07**x_2)/np.floor(-6699.25-3797.89**-5618.21) 

 iteration => 30 
 best cost => 10.00001119734961 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, 0, -11, 2, 16, -13, -5, 1, -1, -8, -2, -4, -11, -3, -17, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8610.07-2256.17-5646.07**x_2)/np.floor(-6699.25-3797.89**-5618.21) 

 iteration => 29 
 best cost => 10.000028241578438 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -15, -11, 3, 18, -16, -11, 0, -6, -8, 1, -4, -11, -6, -17, -1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8430.48-5752.67-5311.47**x_2)/np.floor(-8361.46-3881.17**-5619.5) 

 iteration => 28 
 best cost => 10.000028241578438 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -15, -11, 3, 18, -16, -11, 0, -6, -8, 1, -4, -11, -6, -17, -1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8430.48-5752.67-5311.47**x_2)/np.floor(-8361.46-3881.17**-5619.5) 

 iteration => 27 
 best cost => 10.000028241578438 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -15, -11, 3, 18, -16, -11, 0, -6, -8, 1, -4, -11, -6, -17, -1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8430.48-5752.67-5311.47**x_2)/np.floor(-8361.46-3881.17**-5619.5) 

 iteration => 26 
 best cost => 10.000028241578438 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -15, -11, 3, 18, -16, -11, 0, -6, -8, 1, -4, -11, -6, -17, -1, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8430.48-5752.67-5311.47**x_2)/np.floor(-8361.46-3881.17**-5619.5) 

 iteration => 25 
 best cost => 10.000030771301445 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -13, -12, -16, 18, -19, -19, -10, 13, -6, -2, 8, -4, -5, -16, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8048.13-9564.42-1714.13**x_2)/np.floor(-9606.24-2990.72**-5935.74) 

 iteration => 24 
 best cost => 10.000030771301445 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -13, -12, -16, 18, -19, -19, -10, 13, -6, -2, 8, -4, -5, -16, 11, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8048.13-9564.42-1714.13**x_2)/np.floor(-9606.24-2990.72**-5935.74) 

 iteration => 23 
 best cost => 10.000034963130727 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -14, -11, 3, 18, -17, -9, 7, -6, -9, 17, -10, -10, -7, -17, -8, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8622.97-4463.71-5076.76**x_2)/np.floor(-8729.15-4250.53**-5681.98) 

 iteration => 22 
 best cost => 10.000034963130727 
 best position => [7, 4, -19, -15, -15, 15, 17, 18, 11, 17, -6, 5, 17, 17, -9, -14, -11, 3, 18, -17, -9, 7, -6, -9, 17, -10, -10, -7, -17, -8, 4, 12, 6, -2, 9, -6, -3, -2, -17, -19, -17, -6, 4, 18, 0, -3, 18, -1, -11, 12, 3, -14, -16, 16, -19, -10, 4, -18, 2, -1] 
 best function => np.tan(-8622.97-4463.71-5076.76**x_2)/np.floor(-8729.15-4250.53**-5681.98) 

 iteration => 21 
 best cost => 435.7007634315366 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -7, -11, 10, -1, -13, -5, 18, 5, 5, -2, -7, -15, 4, -17, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 4014.0-2252.56**np.sqrt(np.sign(x_2*np.sqrt(2829.65-6644.24-8716.52*-5427.31))) 

 iteration => 20 
 best cost => 437.6100913806192 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -7, -11, 9, -1, -13, -5, 17, 6, 5, -1, -6, -13, 4, -17, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 4023.1-2165.16**np.sqrt(np.sign(x_2*np.sqrt(3003.7-6730.52-8642.45*-5407.02))) 

 iteration => 19 
 best cost => 454.08933267477096 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -10, -10, -6, -4, -15, -3, 6, 14, 8, 4, 5, -7, 2, -16, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 4106.27-1366.44**np.sqrt(np.sign(x_2*np.sqrt(4594.34-7519.05-7965.49*-5221.54))) 

 iteration => 18 
 best cost => 454.08933267477096 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -10, -10, -6, -4, -15, -3, 6, 14, 8, 4, 5, -7, 2, -16, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 4106.27-1366.44**np.sqrt(np.sign(x_2*np.sqrt(4594.34-7519.05-7965.49*-5221.54))) 

 iteration => 17 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 16 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 15 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 14 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 13 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 12 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 11 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 10 
 best cost => 470.6679959950191 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -12, -16, 6, 15, -18, -8, 12, 4, 17, 15, -14, -11, -16, -18, 7, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3961.98-4167.48**np.sqrt(np.sign(x_2*np.sqrt(9086.37-9244.36-9368.16*-8304.7))) 

 iteration => 9 
 best cost => 519.0204713728165 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -10, -16, 6, 10, -16, -8, 10, -1, 16, 15, -12, -10, -15, -16, 9, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 4894.12-3891.88**np.sqrt(np.sign(x_2*np.sqrt(8556.58-8174.85-8274.37*-8130.96))) 

 iteration => 8 
 best cost => 825.726986825157 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, -6, -15, 3, -4, -2, -6, 5, -15, 18, 15, -8, -9, -14, -10, 14, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 7567.46-3101.45**np.sqrt(np.sign(x_2*np.sqrt(9923.98-773.2-5137.42*-7632.67))) 

 iteration => 7 
 best cost => 836.3332015337618 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 13, -14, 6, 13, -16, -10, -6, -3, 16, 14, 4, 6, -15, -16, 5, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3000.21-4821.55**np.sqrt(np.sign(x_2*np.sqrt(8488.77-8256.66-8029.34*-7074.64))) 

 iteration => 6 
 best cost => 836.3332015337618 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 13, -14, 6, 13, -16, -10, -6, -3, 16, 14, 4, 6, -15, -16, 5, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3000.21-4821.55**np.sqrt(np.sign(x_2*np.sqrt(8488.77-8256.66-8029.34*-7074.64))) 

 iteration => 5 
 best cost => 836.3332015337618 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 13, -14, 6, 13, -16, -10, -6, -3, 16, 14, 4, 6, -15, -16, 5, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 3000.21-4821.55**np.sqrt(np.sign(x_2*np.sqrt(8488.77-8256.66-8029.34*-7074.64))) 

 iteration => 4 
 best cost => 873.3837708667465 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 5, -6, -13, 0, -8, -12, -12, -7, 2, -5, -15, -13, -13, -4, 15, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 8189.06-5804.04**np.sqrt(np.sign(x_2*np.sqrt(1511.23-4138.88-1970.66*-2925.36))) 

 iteration => 3 
 best cost => 873.3837708667465 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 5, -6, -13, 0, -8, -12, -12, -7, 2, -5, -15, -13, -13, -4, 15, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 8189.06-5804.04**np.sqrt(np.sign(x_2*np.sqrt(1511.23-4138.88-1970.66*-2925.36))) 

 iteration => 2 
 best cost => 873.3837708667465 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 5, -6, -13, 0, -8, -12, -12, -7, 2, -5, -15, -13, -13, -4, 15, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 8189.06-5804.04**np.sqrt(np.sign(x_2*np.sqrt(1511.23-4138.88-1970.66*-2925.36))) 

 iteration => 1 
 best cost => 873.3837708667465 
 best position => [3, 3, -6, -18, -14, 5, 14, 9, 9, 9, -9, -3, 13, 7, -5, 5, -6, -13, 0, -8, -12, -12, -7, 2, -5, -15, -13, -13, -4, 15, 4, 8, -19, 2, 14, -8, -11, -8, 5, -16, -12, -15, 6, 6, -3, -13, 16, -7, -9, 12, 2, -12, -13, 12, -15, -10, -2, -19, 13, 1] 
 best function => 8189.06-5804.04**np.sqrt(np.sign(x_2*np.sqrt(1511.23-4138.88-1970.66*-2925.36))) 
