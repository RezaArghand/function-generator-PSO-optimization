
 iteration => 186 
 best cost => 0.15388159670952015 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -5, -1, -14, 12, -12, 11, -2, -11, -5, -12, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221785.7908*x_0 - 3529.70175215747 

 iteration => 185 
 best cost => 0.15391625102958265 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -7, -1, -14, 13, -10, 11, -2, -4, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221807.286*x_0 - 3498.4355895263 

 iteration => 184 
 best cost => 0.15398592089293248 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -5, -1, -14, 12, -12, 11, -2, -8, -5, -12, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221794.629*x_0 - 3540.07693834509 

 iteration => 183 
 best cost => 0.15398592089293248 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -5, -1, -14, 12, -12, 11, -2, -8, -5, -12, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221794.629*x_0 - 3540.07693834509 

 iteration => 182 
 best cost => 0.15424548132328122 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 14, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3515.94979900264 

 iteration => 181 
 best cost => 0.15424548132328122 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 14, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3515.94979900264 

 iteration => 180 
 best cost => 0.15426370490789848 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221537.62*x_0 - 3508.80885003325 

 iteration => 179 
 best cost => 0.15426370490789848 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221537.62*x_0 - 3508.80885003325 

 iteration => 178 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 177 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 176 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 175 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 174 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 173 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 172 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 171 
 best cost => 0.15434572644743078 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 13, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221546.4462*x_0 - 3554.96148626823 

 iteration => 170 
 best cost => 0.15467051623714254 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3540.16019273946 

 iteration => 169 
 best cost => 0.15467051623714254 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3540.16019273946 

 iteration => 168 
 best cost => 0.15467051623714254 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3540.16019273946 

 iteration => 167 
 best cost => 0.15467051623714254 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -5, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -14, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3540.16019273946 

 iteration => 166 
 best cost => 0.15471380482363814 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -9, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3557.0098335118 

 iteration => 165 
 best cost => 0.15471380482363814 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -9, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3557.0098335118 

 iteration => 164 
 best cost => 0.15471380482363814 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -9, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3557.0098335118 

 iteration => 163 
 best cost => 0.15471380482363814 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -9, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3557.0098335118 

 iteration => 162 
 best cost => 0.15471380482363814 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -9, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 221458.1842*x_0 - 3557.0098335118 

 iteration => 161 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 160 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 159 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 158 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 157 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 156 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 155 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 154 
 best cost => 0.16154530267273445 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -6, -6, -1, -14, 15, -9, 11, -2, -5, -5, -13, -12, -2, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 220331.376*x_0 - 3535.55015819833 

 iteration => 153 
 best cost => 0.1848793963578154 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -15, 15, -12, 13, -3, -5, -5, -13, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1220935.7625*x_0 - 3744.80498599561 

 iteration => 152 
 best cost => 0.1848793963578154 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -15, 15, -12, 13, -3, -5, -5, -13, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1220935.7625*x_0 - 3744.80498599561 

 iteration => 151 
 best cost => 0.1848793963578154 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -15, 15, -12, 13, -3, -5, -5, -13, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1220935.7625*x_0 - 3744.80498599561 

 iteration => 150 
 best cost => 0.1848793963578154 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -15, 15, -12, 13, -3, -5, -5, -13, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1220935.7625*x_0 - 3744.80498599561 

 iteration => 149 
 best cost => 0.1987074434898103 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -17, 15, -12, 13, -3, -7, -5, -14, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 629708.763*x_0 - 3523.78549316574 

 iteration => 148 
 best cost => 0.1987074434898103 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -17, 15, -12, 13, -3, -7, -5, -14, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 629708.763*x_0 - 3523.78549316574 

 iteration => 147 
 best cost => 0.1987074434898103 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -17, 15, -12, 13, -3, -7, -5, -14, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 629708.763*x_0 - 3523.78549316574 

 iteration => 146 
 best cost => 0.1987074434898103 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -17, 15, -12, 13, -3, -7, -5, -14, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 629708.763*x_0 - 3523.78549316574 

 iteration => 145 
 best cost => 0.1987074434898103 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -17, 15, -12, 13, -3, -7, -5, -14, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 629708.763*x_0 - 3523.78549316574 

 iteration => 144 
 best cost => 0.23517161111690169 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -14, 15, -12, 13, -3, -5, -5, -11, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1239286.9074*x_0 - 3748.22250731091 

 iteration => 143 
 best cost => 0.23517161111690169 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -6, -1, -14, 15, -12, 13, -3, -5, -5, -11, -13, -6, -5, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 1239286.9074*x_0 - 3748.22250731091 

 iteration => 142 
 best cost => 0.292016884428432 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -5, -1, -17, 15, -12, 13, -1, -7, -6, -13, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 352009.4212*x_0 - 2476.77933489344 

 iteration => 141 
 best cost => 0.292016884428432 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -7, -5, -1, -17, 15, -12, 13, -1, -7, -6, -13, -12, -5, -4, 2, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 352009.4212*x_0 - 2476.77933489344 

 iteration => 140 
 best cost => 0.3617335895825981 
 best position => [-12, 11, -1, 6, 5, -12, 12, -14, 3, -1, -3, 6, -11, -1, 2, -8, 4, -2, -9, 15, -9, 13, -7, -5, 10, -16, -4, -10, -14, -1, 2, 2, -1, -8, 2, -8, 9, -1, -5, 2, -6, -4, -9, -1, -2, -12, -7, 1, -11, -15, -4, -10, 0, 4, 15, -12, -1, 4, 0, -4] 
 best function => 5126697.4448*x_0 - 11664.3736917654 

 iteration => 139 
 best cost => 0.7034918419186549 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -12, 16, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.188474932804 - 1152.41*x_1 

 iteration => 138 
 best cost => 0.7034918419186549 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -12, 16, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.188474932804 - 1152.41*x_1 

 iteration => 137 
 best cost => 0.7034918419186549 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -12, 16, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.188474932804 - 1152.41*x_1 

 iteration => 136 
 best cost => 0.7034918499537959 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.188121194794 - 1152.41*x_1 

 iteration => 135 
 best cost => 0.7034918499537959 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.188121194794 - 1152.41*x_1 

 iteration => 134 
 best cost => 0.7034918598903248 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -11, 12, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.187683750316 - 1152.41*x_1 

 iteration => 133 
 best cost => 0.7034918808649098 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -5, -12, 2, -13, 12, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.186760367887 - 1152.41*x_1 

 iteration => 132 
 best cost => 0.7034919107085791 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -13, 2, -11, 12, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.185446534024 - 1152.41*x_1 

 iteration => 131 
 best cost => 0.703492185437227 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -13, 2, -9, 10, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.173351915473 - 1152.41*x_1 

 iteration => 130 
 best cost => 0.703492185437227 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -13, 2, -9, 10, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.173351915473 - 1152.41*x_1 

 iteration => 129 
 best cost => 0.7034922116494076 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -12, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.172197953818 - 1152.41*x_1 

 iteration => 128 
 best cost => 0.7034922116494076 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -12, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.172197953818 - 1152.41*x_1 

 iteration => 127 
 best cost => 0.7034922486078417 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -11, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.170570900476 - 1152.41*x_1 

 iteration => 126 
 best cost => 0.7034922486078417 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -11, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.170570900476 - 1152.41*x_1 

 iteration => 125 
 best cost => 0.7034922738361056 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -5, -12, 2, -10, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.169460254641 - 1152.41*x_1 

 iteration => 124 
 best cost => 0.7034922738361056 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -5, -12, 2, -10, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.169460254641 - 1152.41*x_1 

 iteration => 123 
 best cost => 0.7034934628072439 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -5, -12, 2, -10, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 475.123948624093 - 1152.42*x_1 

 iteration => 122 
 best cost => 0.7034964907754659 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 474.98381425999 - 1152.41*x_1 

 iteration => 121 
 best cost => 0.7034964907754659 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 474.98381425999 - 1152.41*x_1 

 iteration => 120 
 best cost => 0.7034964907754659 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 474.98381425999 - 1152.41*x_1 

 iteration => 119 
 best cost => 0.7034964907754659 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -10, 13, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 474.98381425999 - 1152.41*x_1 

 iteration => 118 
 best cost => 0.703509926846641 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -5, -13, 2, -12, 13, -13, 13, -2, -16, -8, 1, -11, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 474.385487433723 - 1152.4*x_1 

 iteration => 117 
 best cost => 0.7035367822021898 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, 1, 13, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 473.264484254771 - 1152.49*x_1 

 iteration => 116 
 best cost => 0.7035426652537602 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -9, 1, -11, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.985048602064 - 1152.46*x_1 

 iteration => 115 
 best cost => 0.7035429062904353 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 1, -11, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.981240556766 - 1152.47*x_1 

 iteration => 114 
 best cost => 0.7035429062904353 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 1, -11, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.981240556766 - 1152.47*x_1 

 iteration => 113 
 best cost => 0.7035429062904353 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 1, -11, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.981240556766 - 1152.47*x_1 

 iteration => 112 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 111 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 110 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 109 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 108 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 107 
 best cost => 0.7035439481035858 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 13, -13, 13, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.948977201706 - 1152.49*x_1 

 iteration => 106 
 best cost => 0.7035567874900515 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 15, -13, 12, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.089688045782 - 1152.06*x_1 

 iteration => 105 
 best cost => 0.7035567874900515 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 15, -13, 12, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.089688045782 - 1152.06*x_1 

 iteration => 104 
 best cost => 0.7035567874900515 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 15, -13, 12, -2, -16, -8, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.089688045782 - 1152.06*x_1 

 iteration => 103 
 best cost => 0.703661455438043 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 9, -13, 12, -2, -16, -7, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 472.812534503049 - 1160.07*x_1 

 iteration => 102 
 best cost => 0.7036699940805249 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 10, -13, 13, -2, -16, -7, 0, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 470.317827123815 - 1156.89*x_1 

 iteration => 101 
 best cost => 0.7037029213087469 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -1, 8, -12, 12, -2, -16, -7, 2, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 473.029791919806 - 1163.18*x_1 

 iteration => 100 
 best cost => 0.7037159465202125 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 16, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 470.248719126779 - 1159.86*x_1 

 iteration => 99 
 best cost => 0.7037159465202125 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 16, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 470.248719126779 - 1159.86*x_1 

 iteration => 98 
 best cost => 0.7037159465202125 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 16, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 470.248719126779 - 1159.86*x_1 

 iteration => 97 
 best cost => 0.7037159465202125 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 16, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 470.248719126779 - 1159.86*x_1 

 iteration => 96 
 best cost => 0.703743013297971 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 4, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 468.953514382157 - 1159.72*x_1 

 iteration => 95 
 best cost => 0.7037430149857051 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -6, -12, 2, -3, 4, -12, 12, -2, -16, -7, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 468.953439309392 - 1159.72*x_1 

 iteration => 94 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 93 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 92 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 91 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 90 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 89 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 88 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 87 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 86 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 85 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 84 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 83 
 best cost => 0.7038241532693225 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -7, -12, 1, -3, 5, -13, 13, -2, -16, -8, 1, -10, -1, -7, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 465.129610032993 - 1159.39*x_1 

 iteration => 82 
 best cost => 0.8582671261629253 
 best position => [-1, 11, -5, 16, -7, -2, -2, -13, 11, -4, -2, 7, -8, -3, 13, -4, -9, 3, 5, 5, -12, 11, -9, -12, -7, 1, -11, -1, -16, 1, 2, 3, -9, -2, 5, -14, -1, 12, -3, -1, -11, -10, -11, -2, -10, -6, -2, 14, -2, -6, -7, -8, 0, 11, -1, -8, -7, 10, -9, 0] 
 best function => 476.664113592137 - 4788.34*x_1 

 iteration => 81 
 best cost => 12.611989253245303 
 best position => [-1, 13, -13, 13, -6, 12, -12, -3, 14, -1, 0, 12, -4, 0, 13, 1, -1, -2, 10, 13, -1, 5, -14, -5, -15, 10, -8, -7, -5, -9, 8, 3, -7, 6, 14, -1, -1, -5, -2, 8, -5, -1, -11, -5, 13, 5, -2, 12, 11, 0, 1, -3, -6, 12, -4, -14, -6, 12, 15, 6] 
 best function => x_0 - 436.84 

 iteration => 80 
 best cost => 83.13023033295576 
 best position => [-1, 13, -13, 13, -6, 12, -12, -3, 14, -1, 0, 12, -4, 0, 13, 5, 2, -5, 8, 16, -4, -7, -4, -5, -10, 4, -6, -4, -17, -4, 8, 3, -7, 6, 14, -1, -1, -5, -2, 8, -5, -1, -11, -5, 13, 5, -2, 12, 11, 0, 1, -3, -6, 12, -4, -14, -6, 12, 15, 6] 
 best function => x_0 - 3083.65 

 iteration => 79 
 best cost => 83.31379779594789 
 best position => [-1, 13, -13, 13, -6, 12, -12, -3, 14, -1, 0, 12, -4, 0, 13, 5, 2, -5, 8, 16, -4, -7, -4, -5, -10, 4, -6, -4, -17, -4, 8, 3, -7, 6, 14, -1, -1, -5, -2, 8, -5, -1, -11, -5, 13, 5, -2, 12, 11, 0, 1, -3, -6, 12, -4, -14, -6, 12, 15, 6] 
 best function => x_0 - 3090.54 

 iteration => 78 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 77 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 76 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 75 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 74 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 73 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 72 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 71 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 70 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 69 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 68 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 67 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 66 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 65 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 64 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 63 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 62 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 61 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 60 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 59 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 58 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 57 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 56 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 55 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 54 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 53 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 52 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 51 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 50 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 49 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 48 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 47 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 46 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 44 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 43 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 42 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 41 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 39 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 38 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 37 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 36 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 34 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 33 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 32 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 31 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 29 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 28 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 27 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 26 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 24 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 23 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 22 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 21 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 19 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 18 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 17 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 16 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 14 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 13 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 12 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 11 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 9 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 8 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 7 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 6 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 4 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 3 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 2 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 1 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 
