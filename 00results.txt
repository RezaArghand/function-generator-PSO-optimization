
 iteration => 161 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 160 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 159 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 158 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 157 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 156 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 155 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 154 
 best cost => 3.3124218342268708 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, -7, -7, 9, -5, 0, -5, 5, -13, 11, -11, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.21-np.sin(153.13-2333.09-2478.62*x_0 -6228.48-5494.68-2822.85) 

 iteration => 153 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 152 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 151 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 150 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 149 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 148 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 147 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 146 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 145 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 144 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 143 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 142 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 141 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 140 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 139 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 138 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 137 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 136 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 135 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 134 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 133 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 132 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 131 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 130 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 129 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 128 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 127 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 126 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 125 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 124 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 123 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 122 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 121 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 120 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 119 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 118 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 117 
 best cost => 3.31914072062677 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 10, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(145.74-2331.69-2476.17*x_0 -6593.73-5502.62-2822.75) 

 iteration => 116 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 115 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 114 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 113 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 112 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 111 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 110 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 109 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 108 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 107 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 106 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 105 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 104 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 103 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 102 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 101 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 100 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 99 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 98 
 best cost => 3.3207122673557565 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.22-np.sin(161.5-2329.63-2475.63*x_0 -6574.4-5502.72-2822.64) 

 iteration => 97 
 best cost => 3.324762423899715 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(153.94-2330.82-2488.84*x_0 -6559.47-5502.85-2822.08) 

 iteration => 96 
 best cost => 3.324762423899715 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(153.94-2330.82-2488.84*x_0 -6559.47-5502.85-2822.08) 

 iteration => 95 
 best cost => 3.324762423899715 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(153.94-2330.82-2488.84*x_0 -6559.47-5502.85-2822.08) 

 iteration => 94 
 best cost => 3.324762423899715 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(153.94-2330.82-2488.84*x_0 -6559.47-5502.85-2822.08) 

 iteration => 93 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 92 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 91 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 90 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 89 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 88 
 best cost => 3.3301258477496454 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(144.27-2331.29-2447.2*x_0 -6575.04-5501.39-2826.36) 

 iteration => 87 
 best cost => 3.3310660068818394 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(171.87-2329.43-2362.38*x_0 -6572.84-5501.37-2840.76) 

 iteration => 86 
 best cost => 3.3339174300926806 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(171.87-2329.43-2362.4*x_0 -6572.84-5501.37-2840.75) 

 iteration => 85 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 84 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 83 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 82 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 81 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 80 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 79 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 78 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 77 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 76 
 best cost => 3.3370299199209166 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.13-2328.88-2543.27*x_0 -6564.8-5507.64-2793.3) 

 iteration => 75 
 best cost => 3.3498031063683387 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -8, 9, -5, 0, -5, 5, -13, 12, -12, 0, -12, -4, -11, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.2-np.sin(173.12-2328.84-2543.17*x_0 -6564.81-5507.59-2793.32) 

 iteration => 74 
 best cost => 3.3811958958046895 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -8, 9, -5, 0, -4, 5, -13, 12, -12, -1, -12, -4, -12, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.39-np.sin(140.52-2209.22-2236.93*x_0 -6594.07-5384.17-2847.22) 

 iteration => 73 
 best cost => 3.4208907766662566 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -8, 9, -5, 0, -4, 5, -13, 12, -12, -1, -12, -4, -12, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.39-np.sin(140.53-2209.37-2236.93*x_0 -6594.17-5384.26-2847.24) 

 iteration => 72 
 best cost => 3.4445435393290436 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -12, 13, -12, -1, -12, -5, -9, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.56-np.sin(165.98-2552.76-2240.97*x_0 -6837.55-5602.89-2879.64) 

 iteration => 71 
 best cost => 3.4445435393290436 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -12, 13, -12, -1, -12, -5, -9, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.56-np.sin(165.98-2552.76-2240.97*x_0 -6837.55-5602.89-2879.64) 

 iteration => 70 
 best cost => 3.4445435393290436 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -12, 13, -12, -1, -12, -5, -9, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.56-np.sin(165.98-2552.76-2240.97*x_0 -6837.55-5602.89-2879.64) 

 iteration => 69 
 best cost => 3.4445435393290436 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -12, 13, -12, -1, -12, -5, -9, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.56-np.sin(165.98-2552.76-2240.97*x_0 -6837.55-5602.89-2879.64) 

 iteration => 68 
 best cost => 3.4466761599414273 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -7, 9, -5, 0, -4, 5, -17, 13, -12, -1, -12, -5, -10, -1, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.56-np.sin(-103.71-2529.82-2231.27*x_0 -6776.13-5506.13-2832.37) 

 iteration => 67 
 best cost => 3.4501708849835024 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -17, 13, -12, -1, -12, -5, -10, -1, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.53-np.sin(-35.89-2859.11-2212.25*x_0 -6824.75-5597.94-2824.33) 

 iteration => 66 
 best cost => 3.4501708849835024 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -17, 13, -12, -1, -12, -5, -10, -1, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.53-np.sin(-35.89-2859.11-2212.25*x_0 -6824.75-5597.94-2824.33) 

 iteration => 65 
 best cost => 3.4501708849835024 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -7, 9, -5, 0, -4, 5, -17, 13, -12, -1, -12, -5, -10, -1, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +20.53-np.sin(-35.89-2859.11-2212.25*x_0 -6824.75-5597.94-2824.33) 

 iteration => 64 
 best cost => 3.6234816474322344 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -9, 10, -5, 0, -4, 6, -13, -3, -12, -1, -12, -6, -12, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +19.34-np.sin(46.93-3118.54-2150.63*x_0 -6830.38-5937.73-2863.24) 

 iteration => 63 
 best cost => 3.6234816474322344 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 9, -9, 10, -5, 0, -4, 6, -13, -3, -12, -1, -12, -6, -12, 0, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +19.34-np.sin(46.93-3118.54-2150.63*x_0 -6830.38-5937.73-2863.24) 

 iteration => 62 
 best cost => 4.66933239438876 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -8, 9, -5, 0, -4, 5, -16, 5, -12, -1, -12, -2, -10, -5, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +23.37-np.sin(-2742.65-812.53-2219.09*x_0 -6824.88-5623.5-2846.92) 

 iteration => 61 
 best cost => 4.66933239438876 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -8, 9, -5, 0, -4, 5, -16, 5, -12, -1, -12, -2, -10, -5, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +23.37-np.sin(-2742.65-812.53-2219.09*x_0 -6824.88-5623.5-2846.92) 

 iteration => 60 
 best cost => 4.66933239438876 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 8, -8, 9, -5, 0, -4, 5, -16, 5, -12, -1, -12, -2, -10, -5, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +23.37-np.sin(-2742.65-812.53-2219.09*x_0 -6824.88-5623.5-2846.92) 

 iteration => 59 
 best cost => 341.34990991428106 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 3, -6, -8, -3, -2, -5, -4, -2, 5, -13, 6, -14, -7, -6, -14, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-614.59-np.sin(-7949.3-4098.36-2650.37*x_0 -7421.78--4254.19-1625.11) 

 iteration => 58 
 best cost => 341.41964002821504 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 3, -6, -8, -3, -2, -5, -4, -2, 5, -13, 6, -14, -7, -6, -14, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-614.6-np.sin(-7949.26-4098.34-2650.37*x_0 -7421.76--4254.16-1625.12) 

 iteration => 57 
 best cost => 342.344136251623 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 3, -6, -8, -3, -2, -5, -4, -2, 5, -13, 6, -14, -7, -6, -14, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-616.4-np.sin(-7928.17-4089.55-2650.64*x_0 -7411.77--4240.84-1627.96) 

 iteration => 56 
 best cost => 781.8279275049644 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 2, -8, 2, -5, -3, -5, 13, -3, 6, -5, 3, -14, -1, -13, 2, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-1430.11-np.sin(1579.48-130.1-2771.55*x_0 -2909.44-1763.26-2910.55) 

 iteration => 55 
 best cost => 781.8279275049644 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 2, -8, 2, -5, -3, -5, 13, -3, 6, -5, 3, -14, -1, -13, 2, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-1430.11-np.sin(1579.48-130.1-2771.55*x_0 -2909.44-1763.26-2910.55) 

 iteration => 54 
 best cost => 781.8279275049644 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 2, -8, 2, -5, -3, -5, 13, -3, 6, -5, 3, -14, -1, -13, 2, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-1430.11-np.sin(1579.48-130.1-2771.55*x_0 -2909.44-1763.26-2910.55) 

 iteration => 53 
 best cost => 781.8279275049644 
 best position => [-1, 13, 0, 3, 2, -2, 6, 5, 9, 14, -6, 14, 4, 7, 11, 2, -8, 2, -5, -3, -5, 13, -3, 6, -5, 3, -14, -1, -13, 2, 5, 0, -1, -8, -4, 5, -3, 0, -4, 14, 12, 1, -12, -10, 10, -1, -5, 14, 16, 1, 10, -6, -10, -1, 13, -9, -15, 8, -7, 6] 
 best function => x_0 +-1430.11-np.sin(1579.48-130.1-2771.55*x_0 -2909.44-1763.26-2910.55) 

 iteration => 52 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 51 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 50 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 49 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 48 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 47 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 46 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 45 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 44 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 43 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 42 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 41 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 40 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 39 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 38 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 37 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 36 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 35 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 34 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 33 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 32 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 31 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 29 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 28 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 27 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 26 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 24 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 23 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 22 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 21 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 19 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 18 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 17 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 16 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 14 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 13 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 12 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 11 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 9 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 8 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 7 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 6 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 4 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 3 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 2 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 1 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -8, 4, 13, 10, -7, 13, -1, -3, 14, -1, -9, 1, 7, 11, -17, 12, -6, -11, -9, 10, -15, 0, -14, 7, 10, 15, 2, 3, 2, -11, 3, -1, 8, 14, 13, 1, 6, 10, 13, 15, -2, 16, 9, 3, 4, -9, -14, 10, 10, -13, -16, 13, 6, 4] 
 best function => error(1) : +np.sign(x_26496.9-9977.144131.23-7818.84+4394.09-6178.66np.exp(*-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 
