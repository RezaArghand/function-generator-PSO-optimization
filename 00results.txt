
 iteration => 3135 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3130 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3125 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3120 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3115 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3110 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3105 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3100 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3095 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3090 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3085 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3080 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3075 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3070 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3065 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3060 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3055 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3050 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3045 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3040 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3035 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3030 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3025 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3020 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3015 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3010 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3005 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 3000 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2995 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2990 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2985 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2980 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2975 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2970 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2965 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2960 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2955 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2950 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2945 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2940 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2935 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2930 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2925 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2920 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2915 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2910 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2905 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2900 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2895 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2890 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2885 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2880 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2875 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2870 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2865 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2860 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2855 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2850 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2845 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2840 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2835 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2830 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2825 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2820 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2815 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2810 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2805 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2800 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2795 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2790 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2785 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2780 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2775 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2770 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2765 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2760 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2755 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2750 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2745 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2740 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2735 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2730 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2725 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2720 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2715 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2710 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2705 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2700 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2695 
 best cost => 37.08141499571948 
 best position => [-5, 6, -6, 0, -14, -11, -3, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -8, -15, 4, -4, -14, -16, -9, -14, -1, -5, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -16, -6, -9, -8, -14, -11, -7, -5, 2, -15, 2, -10] 
 best function => 6930.31*x_0 - 291.69*x_1 

 iteration => 2690 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2685 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2680 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2675 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2670 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2665 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2660 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2655 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2650 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2645 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2640 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2635 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2630 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2625 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2620 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2615 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2610 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2605 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2600 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2595 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2590 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2585 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2580 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2575 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2570 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2565 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2560 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2555 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2550 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2545 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2540 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2535 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2530 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2525 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2520 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2515 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2510 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2505 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2500 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2495 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2490 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2485 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2480 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2475 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2470 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2465 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2460 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2455 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2450 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2445 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2440 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2435 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2430 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2425 
 best cost => 37.44354483042415 
 best position => [-5, 6, -6, 0, -14, -11, -5, -11, -16, -14, 10, 11, -8, -6, 1, 0, -2, -9, -7, -15, 4, -4, -14, -15, -10, -14, -1, -6, 11, 7, -3, 3, 9, -16, 5, -12, -1, 1, -14, -6, 2, -14, -13, 1, -7, -16, -10, -3, -10, -6, -9, -8, -14, -11, -9, -5, 2, -15, 2, -10] 
 best function => 6935.0*x_0 - 342.17*x_1 

 iteration => 2420 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2415 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2410 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2405 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2400 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2395 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2390 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2385 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2380 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2375 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2370 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2365 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2360 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2355 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2350 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2345 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2340 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2335 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2330 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2325 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2320 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2315 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2310 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2305 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2300 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2295 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2290 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2285 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2280 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2275 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2270 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2265 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2260 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2255 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2250 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2245 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2240 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2235 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2230 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2225 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2220 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2215 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2210 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2205 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2200 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2195 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2190 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2185 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2180 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2175 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2170 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2165 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2160 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2155 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2150 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2145 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2140 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2135 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2130 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2125 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2120 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2115 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2110 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2105 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2100 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2095 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2090 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2085 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2080 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2075 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2070 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2065 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2060 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2055 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2050 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2045 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2040 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2035 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2030 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2025 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2020 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2015 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2010 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2005 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 2000 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1995 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1990 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1985 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1980 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1975 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1970 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1965 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1960 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1955 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1950 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1945 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1940 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1935 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1930 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1925 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1920 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1915 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1910 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1905 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1900 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1895 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1890 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1885 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1880 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1875 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1870 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1865 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1860 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1855 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1850 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1845 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1840 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1835 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1830 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1825 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1820 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1815 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1810 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1805 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1800 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1795 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1790 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1785 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1780 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1775 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1770 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1765 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1760 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1755 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1750 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1745 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1740 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1735 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1730 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1725 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1720 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1715 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1710 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1705 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1700 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1695 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1690 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1685 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1680 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1675 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1670 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1665 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1660 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1655 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1650 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1645 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1640 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1635 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1630 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1625 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1620 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1615 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1610 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1605 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1600 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1595 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1590 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1585 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1580 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1575 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1570 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1565 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1560 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1555 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1550 
 best cost => 81.98341803137515 
 best position => [-2, 7, -10, -4, -14, 1, 5, -15, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -8, -11, -14, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *877.84-np.tan(np.tanh(x_0 -9580.87)) 

 iteration => 1545 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1540 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1535 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1530 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1525 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1520 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1515 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1510 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1505 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1500 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1495 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1490 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1485 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1480 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1475 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1470 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1465 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1460 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1455 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1450 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1445 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1440 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1435 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1430 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1425 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1420 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1415 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1410 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1405 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1400 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1395 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1390 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1385 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1380 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1375 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1370 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1365 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1360 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1355 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1350 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1345 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1340 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1335 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1330 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1325 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1320 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1315 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1310 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1305 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1300 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1295 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1290 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1285 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1280 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1275 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1270 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1265 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1260 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1255 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1250 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1245 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1240 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1235 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1230 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1225 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1220 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1215 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1210 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1205 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1200 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1195 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1190 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1185 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1180 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1175 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1170 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1165 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1160 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1155 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1150 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1145 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1140 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1135 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1130 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1125 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1120 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1115 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1110 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1105 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1100 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1095 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1090 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1085 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1080 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1075 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1070 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1065 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1060 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1055 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1050 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1045 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1040 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1035 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1030 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1025 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1020 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1015 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1010 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1005 
 best cost => 83.4788102977125 
 best position => [-2, 7, -9, -4, -14, 1, 6, -10, -16, -9, 10, 6, -9, -6, -10, 10, 9, -4, -7, -16, 4, -4, -13, -16, -5, -15, 4, -6, 1, -3, -11, 6, 10, -16, 4, -15, 11, -3, -11, -6, 3, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -13, -12, -10, -7, -2, -15, 3, -15] 
 best function => x_0 *1056.76-np.tan(np.sign(x_1 -9580.87)) 

 iteration => 1000 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 995 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 990 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 985 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 980 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 975 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 970 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 965 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 960 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 955 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 950 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 945 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 940 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 935 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 930 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 925 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 920 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 915 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 910 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 905 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 900 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 895 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 890 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 885 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 880 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 875 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 870 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 865 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 860 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 855 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 850 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 845 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 840 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 835 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 830 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 825 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 820 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 815 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 810 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 805 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 800 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 795 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 790 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 785 
 best cost => 83.49045355181214 
 best position => [-2, 7, -9, 3, -14, 1, 7, -10, -16, -8, 10, 6, -9, -6, -11, 10, 10, -4, -7, -16, 4, -4, -6, -16, -5, -14, 4, -6, 1, 6, -11, 6, 10, -15, 3, -15, 10, -3, -11, -3, 2, -14, -15, 1, -7, -15, -13, -2, -1, 12, -10, -11, -12, -12, -10, -7, -2, -15, 3, -16] 
 best function => 1057.82*x_0 + 1.5574077246549 

 iteration => 780 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 775 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 770 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 765 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 760 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 755 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 750 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 745 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 740 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 735 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 730 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 725 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 720 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 715 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 710 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 705 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 700 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 695 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 690 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 685 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 680 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 675 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 670 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 665 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 660 
 best cost => 84.0783766664882 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -11, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 7, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -4, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1108.69*x_0 + 1.5574077246549 

 iteration => 655 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 650 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 645 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 640 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 635 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 630 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 625 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 620 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 615 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 610 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 605 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 600 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 595 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 590 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 585 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 580 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 575 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 570 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 565 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 560 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 555 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 550 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 545 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 540 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 535 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 530 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 525 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 520 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 515 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 510 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 505 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 500 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 495 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 490 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 485 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 480 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 475 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 470 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 465 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 460 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 455 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 450 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 445 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 440 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 435 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 430 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 425 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 420 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 415 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 410 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 405 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 400 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 395 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 390 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 385 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 380 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 375 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 370 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 365 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 360 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 355 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 350 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 345 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 340 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 335 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 330 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 325 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 320 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 315 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 310 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 305 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 300 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 295 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 290 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 285 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 280 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 275 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 270 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 265 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 260 
 best cost => 84.08450967538528 
 best position => [-2, 7, -9, 3, -14, 1, 8, -10, -14, -6, 10, 8, -9, -6, -9, 11, 11, -3, -7, -16, 4, -4, -6, -16, 0, -14, 5, -8, 1, 6, -11, 6, 10, -15, 3, -9, 11, -3, -11, -7, 2, -5, -15, 1, -7, -15, -13, -1, -1, 12, -2, -3, -8, -11, -10, -6, -4, -12, 3, -15] 
 best function => 1109.2*x_0 + 1.5574077246549 

 iteration => 255 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 250 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 245 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 240 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 235 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 230 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 225 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 220 
 best cost => 99.25335773416765 
 best position => [-1, 4, -5, 3, -4, -10, 5, -11, -15, 3, 10, -11, -7, -4, -3, 15, 6, 3, -5, -14, 9, -4, -2, -13, 10, -3, 8, 2, -6, 6, -10, -2, -10, -13, -7, -7, 2, -7, -9, -11, 3, -7, -16, -14, -5, -5, -16, 12, -2, -5, -4, -3, -5, -11, -4, -7, -2, -10, -7, -16] 
 best function => 1928.58*x_0 

 iteration => 215 
 best cost => 120.01988385273854 
 best position => [-8, -3, 0, 5, -6, -11, 0, -2, -8, 2, -7, -9, -8, -6, -5, 15, 1, -14, -2, 3, 2, -9, -2, -9, 14, 13, 10, -6, -10, 1, -13, -7, -2, -1, -4, -14, -5, -9, -13, -3, -5, -5, -8, -11, 1, -9, -1, 13, -12, -12, -4, -6, -14, -6, -16, 2, -16, -3, -13, -4] 
 best function => 20.0 

 iteration => 210 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 205 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 200 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 195 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 190 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 185 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 180 
 best cost => 147.5347024762133 
 best position => [-5, -2, -3, 11, -1, -12, -1, 15, -6, -1, -2, -1, -9, -3, -15, 5, 3, -4, 1, 10, -7, 2, 2, -11, 15, 14, -7, -6, -11, 11, -7, 5, -7, -1, -4, -6, -13, -12, -6, 0, -6, -3, -8, -11, 3, -9, -2, 15, -11, -14, -1, -7, -3, -6, -11, 3, -4, -4, -15, -1] 
 best function => 21.13925243807499 

 iteration => 175 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 170 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 165 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 160 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 155 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 150 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 145 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 140 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 135 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 130 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 125 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 120 
 best cost => 183.0286076840012 
 best position => [13, -11, 0, 1, 5, -11, -3, 6, -4, -5, -10, 2, 12, 1, -11, 6, 4, -1, 12, 13, -2, -1, 7, -6, 11, 8, 4, -11, -2, 8, -5, -10, -4, -6, 0, 3, -11, -6, -12, -6, -9, -15, -15, -2, -3, -4, -4, 11, -5, -5, -15, -8, 9, -4, -14, -4, -6, -2, -3, -7] 
 best function => 4803.92*x_0 - 113.08 

 iteration => 115 
 best cost => 236.31780056063434 
 best position => [13, 11, 5, -2, -11, -4, 7, -4, 8, -8, 1, -11, 6, 4, -4, 10, -1, 0, 15, 7, -4, -1, 8, -3, 11, 7, 4, -6, -1, -3, -5, -8, -13, -7, -3, -5, -13, -11, -10, -5, -1, -9, -1, -1, 7, -4, -8, 9, -10, -5, -11, -1, -5, -1, -15, -6, -8, -2, -3, -3] 
 best function => 23.65755693219399 

 iteration => 110 
 best cost => 236.31780056063434 
 best position => [13, 11, 5, -2, -11, -4, 7, -4, 8, -8, 1, -11, 6, 4, -4, 10, -1, 0, 15, 7, -4, -1, 8, -3, 11, 7, 4, -6, -1, -3, -5, -8, -13, -7, -3, -5, -13, -11, -10, -5, -1, -9, -1, -1, 7, -4, -8, 9, -10, -5, -11, -1, -5, -1, -15, -6, -8, -2, -3, -3] 
 best function => 23.65755693219399 

 iteration => 105 
 best cost => 236.31780056063434 
 best position => [13, 11, 5, -2, -11, -4, 7, -4, 8, -8, 1, -11, 6, 4, -4, 10, -1, 0, 15, 7, -4, -1, 8, -3, 11, 7, 4, -6, -1, -3, -5, -8, -13, -7, -3, -5, -13, -11, -10, -5, -1, -9, -1, -1, 7, -4, -8, 9, -10, -5, -11, -1, -5, -1, -15, -6, -8, -2, -3, -3] 
 best function => 23.65755693219399 

 iteration => 100 
 best cost => 236.31780056063434 
 best position => [13, 11, 5, -2, -11, -4, 7, -4, 8, -8, 1, -11, 6, 4, -4, 10, -1, 0, 15, 7, -4, -1, 8, -3, 11, 7, 4, -6, -1, -3, -5, -8, -13, -7, -3, -5, -13, -11, -10, -5, -1, -9, -1, -1, 7, -4, -8, 9, -10, -5, -11, -1, -5, -1, -15, -6, -8, -2, -3, -3] 
 best function => 23.65755693219399 

 iteration => 95 
 best cost => 262.1763858622062 
 best position => [8, 11, -3, 4, -9, 5, 10, 0, 6, -13, -2, 7, 6, -2, -4, 5, 4, -10, 6, -4, 15, -1, 8, -4, 9, 6, -4, 2, 1, 8, -8, -1, -3, 2, -10, -16, 5, -9, -6, -10, -6, -11, -14, 8, 1, -3, -16, 9, -3, -4, -12, 3, -4, 3, -3, -5, -11, -3, -6, -1] 
 best function => 24.331050121192877 

 iteration => 90 
 best cost => 262.1763858622062 
 best position => [8, 11, -3, 4, -9, 5, 10, 0, 6, -13, -2, 7, 6, -2, -4, 5, 4, -10, 6, -4, 15, -1, 8, -4, 9, 6, -4, 2, 1, 8, -8, -1, -3, 2, -10, -16, 5, -9, -6, -10, -6, -11, -14, 8, 1, -3, -16, 9, -3, -4, -12, 3, -4, 3, -3, -5, -11, -3, -6, -1] 
 best function => 24.331050121192877 

 iteration => 85 
 best cost => 262.1763858622062 
 best position => [8, 11, -3, 4, -9, 5, 10, 0, 6, -13, -2, 7, 6, -2, -4, 5, 4, -10, 6, -4, 15, -1, 8, -4, 9, 6, -4, 2, 1, 8, -8, -1, -3, 2, -10, -16, 5, -9, -6, -10, -6, -11, -14, 8, 1, -3, -16, 9, -3, -4, -12, 3, -4, 3, -3, -5, -11, -3, -6, -1] 
 best function => 24.331050121192877 

 iteration => 80 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 75 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 70 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 65 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 60 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 55 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 50 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 45 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 40 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 35 
 best cost => 1578.058770412885 
 best position => [10, -1, 0, 10, -11, 4, 4, 2, -3, 5, 1, 13, -2, 5, 13, 2, -13, 15, 3, 15, -4, 4, -1, -11, 2, -9, 1, -3, 14, -5, 12, 11, 8, -7, -2, -10, -5, -8, 6, 6, -2, 4, -1, 15, 2, -9, -2, -10, -1, -10, 1, -9, 3, -1, -6, -7, -16, 10, 1, 1] 
 best function => 8837.12-2171.31-2584.67--397.02-np.exp(x_0 -1676.64*x_0 ) 

 iteration => 30 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 25 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 20 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 15 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 10 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 5 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 

 iteration => 0 
 best cost => 10000.0 
 best position => [11, -3, 0, 9, -1, 13, -7, 3, 13, 9, -7, 12, -1, -3, 13, -1, -8, 1, 7, 10, -16, 11, -6, -10, -9, 9, -14, 0, -13, 6, 10, 14, 2, 3, 2, -10, 3, -1, 8, 13, 12, 1, 6, 9, 12, 14, -2, 15, 9, 3, 4, -9, -13, 9, 10, -12, -15, 13, 5, 4] 
 best function => error(1) : +np.tanh(x_1 6496.9-9977.144131.23-7818.84-4394.09-6178.66np.exp(/-5227.68-x_1 158.81np.tanh(-459.8np.exp(973.99)))) 
