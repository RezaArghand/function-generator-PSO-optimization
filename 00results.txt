
 iteration => 3120 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3115 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3110 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3105 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3100 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3095 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3090 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3085 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3080 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3075 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3070 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3065 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3060 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3055 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3050 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3045 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3040 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3035 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3030 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3025 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3020 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3015 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3010 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3005 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 3000 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2995 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2990 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2985 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2980 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2975 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2970 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2965 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2960 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2955 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2950 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2945 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2940 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2935 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2930 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2925 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2920 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2915 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2910 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2905 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2900 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2895 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2890 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2885 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2880 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2875 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2870 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2865 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2860 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2855 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2850 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2845 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2840 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2835 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2830 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2825 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2820 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2815 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2810 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2805 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2800 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2795 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2790 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2785 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2780 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2775 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2770 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2765 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2760 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2755 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2750 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2745 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2740 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2735 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2730 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2725 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2720 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2715 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2710 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2705 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2700 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2695 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2690 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2685 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2680 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2675 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2670 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2665 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2660 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2655 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2650 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2645 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2640 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2635 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2630 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2625 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2620 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2615 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2610 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2605 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2600 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2595 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2590 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2585 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2580 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2575 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2570 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2565 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2560 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2555 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2550 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2545 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2540 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2535 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2530 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2525 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2520 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2515 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2510 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2505 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2500 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2495 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2490 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2485 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2480 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2475 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2470 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2465 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2460 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2455 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2450 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2445 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2440 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2435 
 best cost => 0.6491104662226265 
 best position => [-12, -30, -34, -6, -22, 50, 0, -1, 29, -15, 42, 11, -16, -47, -17, -7, -8, -18, -26, -9, -22, -8, 4, -25, 25, -9, 31, 4, -8, -34, -30, -23, -15, -13, -15, 51, -9, -44, 2, -43] 
 best function => -4763.99*np.floor(x_1 -1312.18) 

 iteration => 2430 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2425 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2420 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2415 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2410 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2405 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2400 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2395 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2390 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2385 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2380 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2375 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2370 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2365 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2360 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2355 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2350 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2345 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2340 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2335 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2330 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2325 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2320 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2315 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2310 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2305 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2300 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2295 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2290 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2285 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2280 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2275 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2270 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2265 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2260 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2255 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2250 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2245 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2240 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2235 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2230 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2225 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2220 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2215 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2210 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2205 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2200 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2195 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2190 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2185 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2180 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2175 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2170 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2165 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2160 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2155 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2150 
 best cost => 0.6503627346083253 
 best position => [-9, -43, -34, 26, -29, 48, -11, 52, 5, -28, 33, -3, -31, -36, -1, -16, -2, -11, -46, -4, -39, -12, -23, -18, -7, 27, 6, -7, -12, -43, -34, -7, -47, -20, 47, 52, -10, -36, 9, -28] 
 best function => np.exp(x_0 -8616.43/-2924.87) 

 iteration => 2145 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2140 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2135 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2130 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2125 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2120 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2115 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2110 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2105 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2100 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2095 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2090 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2085 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2080 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2075 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2070 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2065 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2060 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2055 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2050 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2045 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2040 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2035 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2030 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2025 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2020 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2015 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2010 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2005 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 2000 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1995 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1990 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1985 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1980 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1975 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1970 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1965 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1960 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1955 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1950 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1945 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1940 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1935 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1930 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1925 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1920 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1915 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1910 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1905 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1900 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1895 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1890 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1885 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1880 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1875 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1870 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1865 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1860 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1855 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1850 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1845 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1840 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1835 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1830 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1825 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1820 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1815 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1810 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1805 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1800 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1795 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1790 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1785 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1780 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1775 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1770 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1765 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1760 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1755 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1750 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1745 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1740 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1735 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1730 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1725 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1720 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1715 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1710 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1705 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1700 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1695 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1690 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1685 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1680 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1675 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1670 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1665 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1660 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1655 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1650 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1645 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1640 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1635 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1630 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1625 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1620 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1615 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1610 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1605 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1600 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1595 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1590 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1585 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1580 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1575 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1570 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1565 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1560 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1555 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1550 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1545 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1540 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1535 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1530 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1525 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1520 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1515 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1510 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1505 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1500 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1495 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1490 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1485 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1480 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1475 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1470 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1465 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1460 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1455 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1450 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1445 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1440 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1435 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1430 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1425 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1420 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1415 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1410 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1405 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1400 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1395 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1390 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1385 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1380 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1375 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1370 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1365 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1360 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1355 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1350 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1345 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1340 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1335 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1330 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1325 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1320 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1315 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1310 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1305 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1300 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1295 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1290 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1285 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1280 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1275 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1270 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1265 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1260 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1255 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1250 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1245 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1240 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1235 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1230 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1225 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1220 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1215 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1210 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1205 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1200 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1195 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1190 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1185 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1180 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1175 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1170 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1165 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1160 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1155 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1150 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1145 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1140 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1135 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1130 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1125 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1120 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1115 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1110 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1105 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1100 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1095 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1090 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1085 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1080 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1075 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1070 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1065 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1060 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1055 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1050 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1045 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1040 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1035 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1030 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1025 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1020 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1015 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1010 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1005 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 1000 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 995 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 990 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 985 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 980 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 975 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 970 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 965 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 960 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 955 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 950 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 945 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 940 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 935 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 930 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 925 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 920 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 915 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 910 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 905 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 900 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 895 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 890 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 885 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 880 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 875 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 870 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 865 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 860 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 855 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 850 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 845 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 840 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 835 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 830 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 825 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 820 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 815 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 810 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 805 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 800 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 795 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 790 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 785 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 780 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 775 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 770 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 765 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 760 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 755 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 750 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 745 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 740 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 735 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 730 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 725 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 720 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 715 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 710 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 705 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 700 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 695 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 690 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 685 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 680 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 675 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 670 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 665 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 660 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 655 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 650 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 645 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 640 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 635 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 630 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 625 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 620 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 615 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 610 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 605 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 600 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 595 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 590 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 585 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 580 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 575 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 570 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 565 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 560 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 555 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 550 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 545 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 540 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 535 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 530 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 525 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 520 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 515 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 510 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 505 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 500 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 495 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 490 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 485 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 480 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 475 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 470 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 465 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 460 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 455 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 450 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 445 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 440 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 435 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 430 
 best cost => 0.9087186716557158 
 best position => [-16, -8, -40, -5, -23, 49, -13, 22, 3, -10, 20, 15, 7, -51, -1, -16, -5, -12, -31, -3, -23, 25, -24, -1, -9, 2, 1, -8, -12, -40, -1, -7, -46, -15, 48, 44, -8, -30, -2, -25] 
 best function => np.floor(x_0 +np.tan(-2982.99)) 

 iteration => 425 
 best cost => 1.0978056582167441 
 best position => [-14, 3, 25, 9, -32, 43, -14, 28, 40, 40, 39, 2, 10, -22, 42, -3, -16, -30, -36, -12, 17, 10, -37, -37, -46, 19, -5, -32, -14, -38, -17, -36, -13, -3, -19, 36, -3, -13, -52, -38] 
 best function => np.sqrt(x_0 --391.25) 

 iteration => 420 
 best cost => 1.0978056582167441 
 best position => [-14, 3, 25, 9, -32, 43, -14, 28, 40, 40, 39, 2, 10, -22, 42, -3, -16, -30, -36, -12, 17, 10, -37, -37, -46, 19, -5, -32, -14, -38, -17, -36, -13, -3, -19, 36, -3, -13, -52, -38] 
 best function => np.sqrt(x_0 --391.25) 

 iteration => 415 
 best cost => 1.0978056582167441 
 best position => [-14, 3, 25, 9, -32, 43, -14, 28, 40, 40, 39, 2, 10, -22, 42, -3, -16, -30, -36, -12, 17, 10, -37, -37, -46, 19, -5, -32, -14, -38, -17, -36, -13, -3, -19, 36, -3, -13, -52, -38] 
 best function => np.sqrt(x_0 --391.25) 

 iteration => 410 
 best cost => 1.0978056582167441 
 best position => [-14, 3, 25, 9, -32, 43, -14, 28, 40, 40, 39, 2, 10, -22, 42, -3, -16, -30, -36, -12, 17, 10, -37, -37, -46, 19, -5, -32, -14, -38, -17, -36, -13, -3, -19, 36, -3, -13, -52, -38] 
 best function => np.sqrt(x_0 --391.25) 

 iteration => 405 
 best cost => 1.0978056582167441 
 best position => [-14, 3, 25, 9, -32, 43, -14, 28, 40, 40, 39, 2, 10, -22, 42, -3, -16, -30, -36, -12, 17, 10, -37, -37, -46, 19, -5, -32, -14, -38, -17, -36, -13, -3, -19, 36, -3, -13, -52, -38] 
 best function => np.sqrt(x_0 --391.25) 

 iteration => 400 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 395 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 390 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 385 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 380 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 375 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 370 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 365 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 360 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 355 
 best cost => 1.1143287676772 
 best position => [-21, 13, 11, -20, -27, 50, -1, 51, 50, 43, 38, -23, 5, -14, 52, -3, 15, -17, -44, -3, 17, -27, -31, -23, -13, 29, -14, -31, -13, -17, -25, -29, -4, -8, -40, 32, -14, -24, -23, -30] 
 best function => np.sqrt(x_1 --389.7) 

 iteration => 350 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 345 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 340 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 335 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 330 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 325 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 320 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 315 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 310 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 305 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 300 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 295 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 290 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 285 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 280 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 275 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 270 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 265 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 260 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 255 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 250 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 245 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 240 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 235 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 230 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 225 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 220 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 215 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 210 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 205 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 200 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 195 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 190 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 185 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 180 
 best cost => 2.1561266654660716 
 best position => [0, 38, -10, 16, -29, 36, -13, 19, 49, 48, 38, -24, 21, -10, 41, -1, -9, -1, -28, 4, 12, 8, 0, -33, -20, 10, -3, -1, -5, -13, -16, -25, -45, -5, -28, 39, -9, -30, -21, -3] 
 best function => np.sin(x_0 )--20.91 

 iteration => 175 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 170 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 165 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 160 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 155 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 150 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 145 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 140 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 135 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 130 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 125 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 120 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 115 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 110 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 105 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 100 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 95 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 90 
 best cost => 2.961971415127133 
 best position => [35, 27, -45, -22, -23, 36, 4, 30, 38, 29, 39, -51, 7, -13, 36, -2, 21, -38, -3, -20, 24, -48, 37, -18, -22, 29, 1, -48, -31, -9, -25, -7, -45, 33, -46, 40, 15, -49, -37, -8] 
 best function => np.floor(3996.26+-np.floor(x_0 **-293.32)) 

 iteration => 85 
 best cost => 2.9621045221129787 
 best position => [-10, 26, -40, 19, -32, 49, -35, 29, 38, 30, 26, -49, 12, 16, 34, -16, 10, -49, 10, -9, 27, -37, 46, -53, -42, 29, -40, -43, -37, 11, -41, -1, -43, 13, -38, 51, 10, -25, -53, -4] 
 best function => 1948.37**np.tanh(np.sin(x_0 +(-2990.44))) 

 iteration => 80 
 best cost => 2.9621045221129787 
 best position => [-10, 26, -40, 19, -32, 49, -35, 29, 38, 30, 26, -49, 12, 16, 34, -16, 10, -49, 10, -9, 27, -37, 46, -53, -42, 29, -40, -43, -37, 11, -41, -1, -43, 13, -38, 51, 10, -25, -53, -4] 
 best function => 1948.37**np.tanh(np.sin(x_0 +(-2990.44))) 

 iteration => 75 
 best cost => 2.9621045221129787 
 best position => [-10, 26, -40, 19, -32, 49, -35, 29, 38, 30, 26, -49, 12, 16, 34, -16, 10, -49, 10, -9, 27, -37, 46, -53, -42, 29, -40, -43, -37, 11, -41, -1, -43, 13, -38, 51, 10, -25, -53, -4] 
 best function => 1948.37**np.tanh(np.sin(x_0 +(-2990.44))) 

 iteration => 70 
 best cost => 2.9621045221129787 
 best position => [-10, 26, -40, 19, -32, 49, -35, 29, 38, 30, 26, -49, 12, 16, 34, -16, 10, -49, 10, -9, 27, -37, 46, -53, -42, 29, -40, -43, -37, 11, -41, -1, -43, 13, -38, 51, 10, -25, -53, -4] 
 best function => 1948.37**np.tanh(np.sin(x_0 +(-2990.44))) 

 iteration => 65 
 best cost => 2.9621045221129787 
 best position => [-10, 26, -40, 19, -32, 49, -35, 29, 38, 30, 26, -49, 12, 16, 34, -16, 10, -49, 10, -9, 27, -37, 46, -53, -42, 29, -40, -43, -37, 11, -41, -1, -43, 13, -38, 51, 10, -25, -53, -4] 
 best function => 1948.37**np.tanh(np.sin(x_0 +(-2990.44))) 

 iteration => 60 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 55 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 50 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 45 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 40 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 35 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 30 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 25 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 20 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 15 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 10 
 best cost => 4.5447858055466135 
 best position => [46, 8, -37, -28, -36, 49, 2, 47, 27, 13, 39, -48, 10, -4, 27, -9, 2, -48, 7, -14, 8, -38, 44, -1, -47, 26, -37, -51, -44, 3, -35, 4, -41, 44, -31, 52, 21, -48, -53, -2] 
 best function => 577.020658456819*x_0 

 iteration => 5 
 best cost => 5.791753151778413 
 best position => [4, 34, -19, 8, -52, 33, -23, 10, 40, -24, 52, -17, 34, 5, 22, -2, 6, -39, 4, -1, -36, -8, -5, -13, -5, 22, -53, -42, -44, -35, -42, -6, -31, 23, -34, 35, 7, -37, -35, -3] 
 best function => 1230.27*x_0 - 193.59 

 iteration => 0 
 best cost => 4381.614877340553 
 best position => [-24, 6, 9, 1, -42, 29, -16, 5, 37, 7, 39, -4, 40, -29, 32, -24, 27, -35, -45, -45, -40, -5, -2, -28, -32, 32, -47, -44, -17, -39, 33, -22, -26, -2, -43, 42, 5, -30, -42, -33] 
 best function => 9757.05 
