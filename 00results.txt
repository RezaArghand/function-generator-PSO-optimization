
 iteration => 15 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 14 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 13 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 12 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 11 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 10 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 9 
 best cost => 0.9583314445713433 
 best position => [-15, 11, 2, 16, -15, 1, 7, -13, 12, 2, 14, 13, 12, 8, 3, -10, -5, 8, -16, 16, 16, -13, 2, -15, 8, 16, -17, -8, 16, -14, -14, 15, -16, -17, -7, 10, 5, -11, 9, 5, 15, -16, 12, 2, -17, 16, 13, -15, -3, -16, -16, -3, -3, 16, -10, 16, 15, -12, -17, -17] 
 best function => np.sign(np.exp(x_2+np.sin(+-1399.74**-4753.46*4711.35-2786.41-4330.07))) 

 iteration => 8 
 best cost => 0.9846709950373213 
 best position => [-12, 13, -4, 16, -12, 1, 7, -14, 13, -10, 17, 14, 2, -7, 13, -14, -2, 17, -10, 16, 11, -5, 5, -15, 11, 11, -17, -2, 10, -13, -5, 13, -13, -17, -15, -10, -7, -16, 14, 3, -2, -13, 1, 4, -14, 13, 7, -13, 4, -12, -9, -3, -13, 15, -14, 15, 6, -9, -5, -17] 
 best function => np.exp(np.tanh(x_1 -2670.43-4977.34-523.87/-3905.63/3248.1-4298.33)) 

 iteration => 7 
 best cost => 0.9846709950373213 
 best position => [-12, 13, -4, 16, -12, 1, 7, -14, 13, -10, 17, 14, 2, -7, 13, -14, -2, 17, -10, 16, 11, -5, 5, -15, 11, 11, -17, -2, 10, -13, -5, 13, -13, -17, -15, -10, -7, -16, 14, 3, -2, -13, 1, 4, -14, 13, 7, -13, 4, -12, -9, -3, -13, 15, -14, 15, 6, -9, -5, -17] 
 best function => np.exp(np.tanh(x_1 -2670.43-4977.34-523.87/-3905.63/3248.1-4298.33)) 

 iteration => 6 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 

 iteration => 5 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 

 iteration => 4 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 

 iteration => 3 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 

 iteration => 2 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 

 iteration => 1 
 best cost => 0.9999873550145063 
 best position => [-7, 8, 3, 16, -11, -6, 14, -4, 14, -8, 14, 9, 8, 12, 9, -14, 12, 7, -11, 11, -2, -4, 13, -14, 16, -5, -9, -7, -4, 9, -13, 2, -12, -17, -16, -1, 0, -13, 5, 7, -6, -5, -10, 6, -6, 9, 3, -9, 3, 0, -11, -2, -16, 7, -14, 12, 16, -11, -2, -6] 
 best function => 3295.13**np.sign(3725.84-3233.64**+x_2-3929.17-4049.52-1441.64-2568.08) 
